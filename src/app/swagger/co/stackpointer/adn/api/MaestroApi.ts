/**
 * ADN 3.0 API
 * Esta es la especificcion para el API del Sitema ADN en su version 3.0 La audiencia de este API es PRIVADA, es decir, solamente para desarrollos internos. NO se debe utilizar por externos o asociados sin la supervicion del equipo de TECINF 
 *
 * OpenAPI spec version: 0.0.1
 * Contact: carlosribero@tinformatica.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {Http, Headers, RequestOptionsArgs, Response, URLSearchParams} from '@angular/http';
import {Injectable, Optional} from '@angular/core';
import {Observable} from 'rxjs/Observable';
import * as models from '../model/models';
import 'rxjs/Rx';

/* tslint:disable:no-unused-variable member-ordering */

'use strict';

@Injectable()
export class MaestroApi {
    protected basePath = 'http://edge.stackpointer.co:18080/ADN';
    public defaultHeaders : Headers = new Headers();

    constructor(protected http: Http, @Optional() basePath: string) {
        if (basePath) {
            this.basePath = basePath;
        }
    }

    /**
     * Obtiene el conjunto de canales-distribucion
     * Listado de canales-distribucion 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param offset Numero del primer registro a cargar en la pagina Se presenta un ejemplo para la siguiente tabla:  |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**ausente** | Retorna los registros desde el primer registro de la consulta| http://api/recurso |   |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**valor** | Retorna los registros desde el registro indicado en el parametro| http://api/recurso?offset&#x3D;3 |  |Campo1|Campo2| |:---|:---| |3|nombre3| |4|nombre4| |5|nombre5| 
     * @param limit Numero de elementos a retornar en la consulta. Se presenta un ejemplo para la siguiente tabla:  |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**ausente** | El numero de registros por defecto del sistema, supongamos que es 20| http://api/recurso |   |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**valor** | Retorna el numero de registros indicados en el parametro| http://api/recurso?limit&#x3D;2 |  |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| 
     * @param sort Listado de nombres de campos para ordenar los resultados , se permite un maximo de 3 criterios de ordenamiento.  Prefijo|Descripcion|Ejemplo :---:|:---|---: +| Indica que el campo se debera nombrar ascendentemente| +nombre -| Indica que el campo se debera nombrar descendentemente| -nombre *vacio* | Indica que el campo se debera nombrar por defecto, es decir, ascendentemente| nombre **multiple** | Se puede enviar con multiple campos para filtrar | +nombre&amp;#124;-apellido&amp;#124;identificador 
     * @param fields Listado de nombres decampos a retornar de la consulta, separados por comas (,). Los campos requeridos siempre deben ser retornados, los ejemplos siguen la base presentada a continuacion :  &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor       campo3: valor       campo4: valor       campo5: valor     } &#x60;&#x60;&#x60;   |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**ausente** | Retorna por defecto todos los campos del recurso solicitado| http://api/recurso | &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor       campo3: valor       campo4: valor       campo5: valor     } &#x60;&#x60;&#x60; |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**vacio** | Retorna solamente los campos requeridos| http://api/recurso?fields | &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor     } &#x60;&#x60;&#x60;  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**multiple** | Retorna los campos requeridos más los campos indicados en el parametro | http://api/recurso?fields&#x3D;campo3,campo4 | &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor       campo3: valor       campo4: valor     } &#x60;&#x60;&#x60; 
     * @param q Trae los recursos de la consulta que cumplan con la cadena de busqueda en cualquiera de los campos del recurso
     * @param filter Filtra los registros de la consulta de acuerdo a la cadena de filtrado ingresada Se presenta un ejemplo para la siguiente tabla:  |Campo1|Campo2|Campo3| |:---|:---|:---| |1|nombre1|apellido1| |2|nombre2|apellido1| |3|nombre3|apellido2| |4|nombre2|apellido2| |5|nombre5|apellido1|  |Caso|Descripcion|Ejemplo | Encoded| |:---:|:---|---|---| |**ausente** | Retorna los registros de la consulta sin aplicar filtros o aplicando los filtros por defecto del sistema| http://api/recurso |http://api/recurso |   |Campo1|Campo2|Campo3| |:---|:---|:---| |1|nombre1|apellido1| |2|nombre2|apellido1| |3|nombre3|apellido2| |4|nombre2|apellido2| |5|nombre5|apellido1|  |Caso|Descripcion|Ejemplo | Encoded| |:---:|:---|---|---| |**Filtro simple** | Retorna el numero de registros indicados en el parametro | http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2) |http://api/recurso?filter&#x3D;campo2%20%3D%20nombre2 |  |Campo1|Campo2|Campo3| |:---|:---|:---| |2|nombre2|apellido1| |4|nombre2|apellido2|  |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| |**Filtro LIKE** | Retorna el numero de registros indicados en el parametro | http://api/recurso?filter&#x3D;campo3 like%llido2 |http://api/recurso?filter&#x3D;campo3%20like%20llido2%25 |  |Campo1|Campo2|Campo3| |:---|:---|:---| |3|nombre3|apellido2| |4|nombre2|apellido2|   |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| |compuerta ** OR ** | Ejecutando 2 condiciones con la compuerta **OR** |http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2) or (campo2 like %re3)| http://api/recurso?filter&#x3D;(campo2%20%3D%20nombre2)%20or%20(campo2%20like%20%25re3) |  |Campo1|Campo2|Campo3| |:---|:---|:---| |2|nombre2|apellido1| |3|nombre3|apellido2|  |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| |compuerta ** AND** | Ejecutando 2 condiciones con la compuerta **AND** |http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2) and (campo2 like %o2)| http://api/recurso?filter&#x3D;(campo2%20%3D%20nombre2)%20and%20(campo2%20like%20%25o2) |  |Campo1|Campo2|Campo3| |:---|:---|:---| |4|nombre2|apellido2|  |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| | **MULTI** | Multiples parametros de filtro **MULTI**  unidos implicitamente por una compuerta **AND**  | http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2)&amp;filter&#x3D;(campo2 like %o2)| http://api/recurso?filter&#x3D;(campo2%20%3D%20nombre2)&amp;filter&#x3D;(campo2%20like%20%25o2) |  |Campo1|Campo2|Campo3| |:---|:---|:---| |4|nombre2|apellido2| 
     */
    public canalesDistribucionGet (eid: string, uid: string, offset?: number, limit?: number, sort?: Array<string>, fields?: Array<string>, q?: string, filter?: Array<string>, extraHttpRequestParams?: any ) : Observable<models.CanalesDistribucionPaginados> {
        const path = this.basePath + '/canales-distribucion';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling canalesDistribucionGet.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling canalesDistribucionGet.');
        }
        if (offset !== undefined) {
            queryParameters.set('offset', String(offset));
        }

        if (limit !== undefined) {
            queryParameters.set('limit', String(limit));
        }

        if (sort !== undefined) {
            queryParameters.set('sort', String(sort));
        }

        if (fields !== undefined) {
            queryParameters.set('fields', String(fields));
        }

        if (q !== undefined) {
            queryParameters.set('q', String(q));
        }

        if (filter !== undefined) {
            queryParameters.set('filter', String(filter));
        }

            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Eliminar recurso CanalDistribucion
     * Esta operación solo puede ser realizada por usuarios autorizados
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param id Parametros para identificar un recurso de forma unica
     */
    public canalesDistribucionIdDelete (eid: string, uid: string, id: string, extraHttpRequestParams?: any ) : Observable<models.CanalDistribucion> {
        const path = this.basePath + '/canales-distribucion/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling canalesDistribucionIdDelete.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling canalesDistribucionIdDelete.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling canalesDistribucionIdDelete.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Información de un CanalDistribucion
     * 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param id Parametros para identificar un recurso de forma unica
     */
    public canalesDistribucionIdGet (eid: string, uid: string, id: string, extraHttpRequestParams?: any ) : Observable<models.CanalDistribucion> {
        const path = this.basePath + '/canales-distribucion/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling canalesDistribucionIdGet.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling canalesDistribucionIdGet.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling canalesDistribucionIdGet.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Actualizar Recurso CanalDistribucion
     * Esta operación solo puede ser realizada por usuarios autorizados
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param id Parametros para identificar un recurso de forma unica
     * @param body Canal de Distribucion
     */
    public canalesDistribucionIdPut (eid: string, uid: string, id: string, body: models.CanalDistribucion, extraHttpRequestParams?: any ) : Observable<models.CanalDistribucion> {
        const path = this.basePath + '/canales-distribucion/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling canalesDistribucionIdPut.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling canalesDistribucionIdPut.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling canalesDistribucionIdPut.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling canalesDistribucionIdPut.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Obtiene el conjunto de canales-distribucion en forma de lista
     * Listado de canales-distribucion 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param q Trae los recursos de la consulta que cumplan con la cadena de busqueda en cualquiera de los campos del recurso
     */
    public canalesDistribucionListarGet (eid: string, uid: string, q?: string, extraHttpRequestParams?: any ) : Observable<models.Listas> {
        const path = this.basePath + '/canales-distribucion/listar';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling canalesDistribucionListarGet.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling canalesDistribucionListarGet.');
        }
        if (q !== undefined) {
            queryParameters.set('q', String(q));
        }

            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Crear un CanalDistribucion
     * \&quot;Crear un CanalDistribucion\&quot; 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param body Canal de Distribucion
     */
    public canalesDistribucionPost (eid: string, uid: string, body: models.CanalDistribucion, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/canales-distribucion';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling canalesDistribucionPost.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling canalesDistribucionPost.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling canalesDistribucionPost.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Eliminar recurso Cliente
     * Esta operación solo puede ser realizada por usuarios autorizados
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param id Parametros para identificar un recurso de forma unica
     */
    public clientesIdDelete (eid: string, uid: string, id: string, extraHttpRequestParams?: any ) : Observable<models.Cliente> {
        const path = this.basePath + '/clientes/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling clientesIdDelete.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling clientesIdDelete.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling clientesIdDelete.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Información de un Cliente
     * 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param id Parametros para identificar un recurso de forma unica
     */
    public clientesIdGet (eid: string, uid: string, id: string, extraHttpRequestParams?: any ) : Observable<models.Cliente> {
        const path = this.basePath + '/clientes/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling clientesIdGet.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling clientesIdGet.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling clientesIdGet.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Actualizar Recurso Cliente
     * Esta operación solo puede ser realizada por usuarios autorizados
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param id Parametros para identificar un recurso de forma unica
     * @param body Cliente 
     */
    public clientesIdPut (eid: string, uid: string, id: string, body: models.Cliente, extraHttpRequestParams?: any ) : Observable<models.Cliente> {
        const path = this.basePath + '/clientes/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling clientesIdPut.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling clientesIdPut.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling clientesIdPut.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling clientesIdPut.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Obtiene el conjunto de clientes en forma de lista
     * Listado de clientes 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param q Trae los recursos de la consulta que cumplan con la cadena de busqueda en cualquiera de los campos del recurso
     */
    public clientesListarGet (eid: string, uid: string, q?: string, extraHttpRequestParams?: any ) : Observable<models.Listas> {
        const path = this.basePath + '/clientes/listar';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling clientesListarGet.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling clientesListarGet.');
        }
        if (q !== undefined) {
            queryParameters.set('q', String(q));
        }

            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Crear un Cliente
     * \&quot;Crear un Cliente\&quot; 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param body Cliente 
     */
    public clientesPost (eid: string, uid: string, body: models.Cliente, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/clientes';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling clientesPost.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling clientesPost.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling clientesPost.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Obtiene el conjunto de departamentos
     * Listado de departamentos 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param offset Numero del primer registro a cargar en la pagina Se presenta un ejemplo para la siguiente tabla:  |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**ausente** | Retorna los registros desde el primer registro de la consulta| http://api/recurso |   |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**valor** | Retorna los registros desde el registro indicado en el parametro| http://api/recurso?offset&#x3D;3 |  |Campo1|Campo2| |:---|:---| |3|nombre3| |4|nombre4| |5|nombre5| 
     * @param limit Numero de elementos a retornar en la consulta. Se presenta un ejemplo para la siguiente tabla:  |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**ausente** | El numero de registros por defecto del sistema, supongamos que es 20| http://api/recurso |   |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**valor** | Retorna el numero de registros indicados en el parametro| http://api/recurso?limit&#x3D;2 |  |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| 
     * @param sort Listado de nombres de campos para ordenar los resultados , se permite un maximo de 3 criterios de ordenamiento.  Prefijo|Descripcion|Ejemplo :---:|:---|---: +| Indica que el campo se debera nombrar ascendentemente| +nombre -| Indica que el campo se debera nombrar descendentemente| -nombre *vacio* | Indica que el campo se debera nombrar por defecto, es decir, ascendentemente| nombre **multiple** | Se puede enviar con multiple campos para filtrar | +nombre&amp;#124;-apellido&amp;#124;identificador 
     * @param fields Listado de nombres decampos a retornar de la consulta, separados por comas (,). Los campos requeridos siempre deben ser retornados, los ejemplos siguen la base presentada a continuacion :  &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor       campo3: valor       campo4: valor       campo5: valor     } &#x60;&#x60;&#x60;   |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**ausente** | Retorna por defecto todos los campos del recurso solicitado| http://api/recurso | &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor       campo3: valor       campo4: valor       campo5: valor     } &#x60;&#x60;&#x60; |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**vacio** | Retorna solamente los campos requeridos| http://api/recurso?fields | &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor     } &#x60;&#x60;&#x60;  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**multiple** | Retorna los campos requeridos más los campos indicados en el parametro | http://api/recurso?fields&#x3D;campo3,campo4 | &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor       campo3: valor       campo4: valor     } &#x60;&#x60;&#x60; 
     * @param q Trae los recursos de la consulta que cumplan con la cadena de busqueda en cualquiera de los campos del recurso
     * @param filter Filtra los registros de la consulta de acuerdo a la cadena de filtrado ingresada Se presenta un ejemplo para la siguiente tabla:  |Campo1|Campo2|Campo3| |:---|:---|:---| |1|nombre1|apellido1| |2|nombre2|apellido1| |3|nombre3|apellido2| |4|nombre2|apellido2| |5|nombre5|apellido1|  |Caso|Descripcion|Ejemplo | Encoded| |:---:|:---|---|---| |**ausente** | Retorna los registros de la consulta sin aplicar filtros o aplicando los filtros por defecto del sistema| http://api/recurso |http://api/recurso |   |Campo1|Campo2|Campo3| |:---|:---|:---| |1|nombre1|apellido1| |2|nombre2|apellido1| |3|nombre3|apellido2| |4|nombre2|apellido2| |5|nombre5|apellido1|  |Caso|Descripcion|Ejemplo | Encoded| |:---:|:---|---|---| |**Filtro simple** | Retorna el numero de registros indicados en el parametro | http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2) |http://api/recurso?filter&#x3D;campo2%20%3D%20nombre2 |  |Campo1|Campo2|Campo3| |:---|:---|:---| |2|nombre2|apellido1| |4|nombre2|apellido2|  |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| |**Filtro LIKE** | Retorna el numero de registros indicados en el parametro | http://api/recurso?filter&#x3D;campo3 like%llido2 |http://api/recurso?filter&#x3D;campo3%20like%20llido2%25 |  |Campo1|Campo2|Campo3| |:---|:---|:---| |3|nombre3|apellido2| |4|nombre2|apellido2|   |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| |compuerta ** OR ** | Ejecutando 2 condiciones con la compuerta **OR** |http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2) or (campo2 like %re3)| http://api/recurso?filter&#x3D;(campo2%20%3D%20nombre2)%20or%20(campo2%20like%20%25re3) |  |Campo1|Campo2|Campo3| |:---|:---|:---| |2|nombre2|apellido1| |3|nombre3|apellido2|  |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| |compuerta ** AND** | Ejecutando 2 condiciones con la compuerta **AND** |http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2) and (campo2 like %o2)| http://api/recurso?filter&#x3D;(campo2%20%3D%20nombre2)%20and%20(campo2%20like%20%25o2) |  |Campo1|Campo2|Campo3| |:---|:---|:---| |4|nombre2|apellido2|  |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| | **MULTI** | Multiples parametros de filtro **MULTI**  unidos implicitamente por una compuerta **AND**  | http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2)&amp;filter&#x3D;(campo2 like %o2)| http://api/recurso?filter&#x3D;(campo2%20%3D%20nombre2)&amp;filter&#x3D;(campo2%20like%20%25o2) |  |Campo1|Campo2|Campo3| |:---|:---|:---| |4|nombre2|apellido2| 
     */
    public departamentosGet (eid: string, uid: string, offset?: number, limit?: number, sort?: Array<string>, fields?: Array<string>, q?: string, filter?: Array<string>, extraHttpRequestParams?: any ) : Observable<models.DepartamentosPaginados> {
        const path = this.basePath + '/departamentos';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling departamentosGet.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling departamentosGet.');
        }
        if (offset !== undefined) {
            queryParameters.set('offset', String(offset));
        }

        if (limit !== undefined) {
            queryParameters.set('limit', String(limit));
        }

        if (sort !== undefined) {
            queryParameters.set('sort', String(sort));
        }

        if (fields !== undefined) {
            queryParameters.set('fields', String(fields));
        }

        if (q !== undefined) {
            queryParameters.set('q', String(q));
        }

        if (filter !== undefined) {
            queryParameters.set('filter', String(filter));
        }

            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

            headerParams.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Eliminar recurso Departamento
     * Esta operación solo puede ser realizada por usuarios autorizados
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param id Parametros para identificar un recurso de forma unica
     */
    public departamentosIdDelete (eid: string, uid: string, id: string, extraHttpRequestParams?: any ) : Observable<models.Departamento> {
        const path = this.basePath + '/departamentos/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling departamentosIdDelete.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling departamentosIdDelete.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling departamentosIdDelete.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Información de un Departamento
     * 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param id Parametros para identificar un recurso de forma unica
     */
    public departamentosIdGet (eid: string, uid: string, id: string, extraHttpRequestParams?: any ) : Observable<models.Departamento> {
        const path = this.basePath + '/departamentos/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling departamentosIdGet.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling departamentosIdGet.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling departamentosIdGet.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Actualizar Recurso Departamento
     * Esta operación solo puede ser realizada por usuarios autorizados
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param id Parametros para identificar un recurso de forma unica
     * @param body Departamento 
     */
    public departamentosIdPut (eid: string, uid: string, id: string, body: models.Departamento, extraHttpRequestParams?: any ) : Observable<models.Departamento> {
        const path = this.basePath + '/departamentos/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling departamentosIdPut.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling departamentosIdPut.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling departamentosIdPut.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling departamentosIdPut.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Obtiene el conjunto de departamentos en forma de lista
     * Listado de departamentos 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param q Trae los recursos de la consulta que cumplan con la cadena de busqueda en cualquiera de los campos del recurso
     */
    public departamentosListarGet (eid: string, uid: string, q?: string, extraHttpRequestParams?: any ) : Observable<models.Listas> {
        const path = this.basePath + '/departamentos/listar';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling departamentosListarGet.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling departamentosListarGet.');
        }
        if (q !== undefined) {
            queryParameters.set('q', String(q));
        }

            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Crear un Departamento
     * \&quot;Crear un Departamento\&quot; 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param body Departamento 
     */
    public departamentosPost (eid: string, uid: string, body: models.Departamento, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/departamentos';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling departamentosPost.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling departamentosPost.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling departamentosPost.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Obtiene el conjunto de disponibles-proveedor
     * Listado de disponibles-proveedor 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param offset Numero del primer registro a cargar en la pagina Se presenta un ejemplo para la siguiente tabla:  |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**ausente** | Retorna los registros desde el primer registro de la consulta| http://api/recurso |   |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**valor** | Retorna los registros desde el registro indicado en el parametro| http://api/recurso?offset&#x3D;3 |  |Campo1|Campo2| |:---|:---| |3|nombre3| |4|nombre4| |5|nombre5| 
     * @param limit Numero de elementos a retornar en la consulta. Se presenta un ejemplo para la siguiente tabla:  |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**ausente** | El numero de registros por defecto del sistema, supongamos que es 20| http://api/recurso |   |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**valor** | Retorna el numero de registros indicados en el parametro| http://api/recurso?limit&#x3D;2 |  |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| 
     * @param sort Listado de nombres de campos para ordenar los resultados , se permite un maximo de 3 criterios de ordenamiento.  Prefijo|Descripcion|Ejemplo :---:|:---|---: +| Indica que el campo se debera nombrar ascendentemente| +nombre -| Indica que el campo se debera nombrar descendentemente| -nombre *vacio* | Indica que el campo se debera nombrar por defecto, es decir, ascendentemente| nombre **multiple** | Se puede enviar con multiple campos para filtrar | +nombre&amp;#124;-apellido&amp;#124;identificador 
     * @param fields Listado de nombres decampos a retornar de la consulta, separados por comas (,). Los campos requeridos siempre deben ser retornados, los ejemplos siguen la base presentada a continuacion :  &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor       campo3: valor       campo4: valor       campo5: valor     } &#x60;&#x60;&#x60;   |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**ausente** | Retorna por defecto todos los campos del recurso solicitado| http://api/recurso | &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor       campo3: valor       campo4: valor       campo5: valor     } &#x60;&#x60;&#x60; |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**vacio** | Retorna solamente los campos requeridos| http://api/recurso?fields | &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor     } &#x60;&#x60;&#x60;  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**multiple** | Retorna los campos requeridos más los campos indicados en el parametro | http://api/recurso?fields&#x3D;campo3,campo4 | &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor       campo3: valor       campo4: valor     } &#x60;&#x60;&#x60; 
     * @param q Trae los recursos de la consulta que cumplan con la cadena de busqueda en cualquiera de los campos del recurso
     * @param filter Filtra los registros de la consulta de acuerdo a la cadena de filtrado ingresada Se presenta un ejemplo para la siguiente tabla:  |Campo1|Campo2|Campo3| |:---|:---|:---| |1|nombre1|apellido1| |2|nombre2|apellido1| |3|nombre3|apellido2| |4|nombre2|apellido2| |5|nombre5|apellido1|  |Caso|Descripcion|Ejemplo | Encoded| |:---:|:---|---|---| |**ausente** | Retorna los registros de la consulta sin aplicar filtros o aplicando los filtros por defecto del sistema| http://api/recurso |http://api/recurso |   |Campo1|Campo2|Campo3| |:---|:---|:---| |1|nombre1|apellido1| |2|nombre2|apellido1| |3|nombre3|apellido2| |4|nombre2|apellido2| |5|nombre5|apellido1|  |Caso|Descripcion|Ejemplo | Encoded| |:---:|:---|---|---| |**Filtro simple** | Retorna el numero de registros indicados en el parametro | http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2) |http://api/recurso?filter&#x3D;campo2%20%3D%20nombre2 |  |Campo1|Campo2|Campo3| |:---|:---|:---| |2|nombre2|apellido1| |4|nombre2|apellido2|  |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| |**Filtro LIKE** | Retorna el numero de registros indicados en el parametro | http://api/recurso?filter&#x3D;campo3 like%llido2 |http://api/recurso?filter&#x3D;campo3%20like%20llido2%25 |  |Campo1|Campo2|Campo3| |:---|:---|:---| |3|nombre3|apellido2| |4|nombre2|apellido2|   |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| |compuerta ** OR ** | Ejecutando 2 condiciones con la compuerta **OR** |http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2) or (campo2 like %re3)| http://api/recurso?filter&#x3D;(campo2%20%3D%20nombre2)%20or%20(campo2%20like%20%25re3) |  |Campo1|Campo2|Campo3| |:---|:---|:---| |2|nombre2|apellido1| |3|nombre3|apellido2|  |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| |compuerta ** AND** | Ejecutando 2 condiciones con la compuerta **AND** |http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2) and (campo2 like %o2)| http://api/recurso?filter&#x3D;(campo2%20%3D%20nombre2)%20and%20(campo2%20like%20%25o2) |  |Campo1|Campo2|Campo3| |:---|:---|:---| |4|nombre2|apellido2|  |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| | **MULTI** | Multiples parametros de filtro **MULTI**  unidos implicitamente por una compuerta **AND**  | http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2)&amp;filter&#x3D;(campo2 like %o2)| http://api/recurso?filter&#x3D;(campo2%20%3D%20nombre2)&amp;filter&#x3D;(campo2%20like%20%25o2) |  |Campo1|Campo2|Campo3| |:---|:---|:---| |4|nombre2|apellido2| 
     */
    public disponiblesProveedorGet (eid: string, uid: string, offset?: number, limit?: number, sort?: Array<string>, fields?: Array<string>, q?: string, filter?: Array<string>, extraHttpRequestParams?: any ) : Observable<models.DisponiblesProveedorPaginados> {
        const path = this.basePath + '/disponibles-proveedor';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling disponiblesProveedorGet.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling disponiblesProveedorGet.');
        }
        if (offset !== undefined) {
            queryParameters.set('offset', String(offset));
        }

        if (limit !== undefined) {
            queryParameters.set('limit', String(limit));
        }

        if (sort !== undefined) {
            queryParameters.set('sort', String(sort));
        }

        if (fields !== undefined) {
            queryParameters.set('fields', String(fields));
        }

        if (q !== undefined) {
            queryParameters.set('q', String(q));
        }

        if (filter !== undefined) {
            queryParameters.set('filter', String(filter));
        }

            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Eliminar recurso DisponibleProveedor
     * Esta operación solo puede ser realizada por usuarios autorizados
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param id Parametros para identificar un recurso de forma unica
     */
    public disponiblesProveedorIdDelete (eid: string, uid: string, id: string, extraHttpRequestParams?: any ) : Observable<models.DisponibleProveedor> {
        const path = this.basePath + '/disponibles-proveedor/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling disponiblesProveedorIdDelete.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling disponiblesProveedorIdDelete.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling disponiblesProveedorIdDelete.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Información de un DisponibleProveedor
     * 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param id Parametros para identificar un recurso de forma unica
     */
    public disponiblesProveedorIdGet (eid: string, uid: string, id: string, extraHttpRequestParams?: any ) : Observable<models.DisponibleProveedor> {
        const path = this.basePath + '/disponibles-proveedor/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling disponiblesProveedorIdGet.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling disponiblesProveedorIdGet.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling disponiblesProveedorIdGet.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Actualizar Recurso DisponibleProveedor
     * Esta operación solo puede ser realizada por usuarios autorizados
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param id Parametros para identificar un recurso de forma unica
     * @param body Disponible para Proveedores
     */
    public disponiblesProveedorIdPut (eid: string, uid: string, id: string, body: models.DisponibleProveedor, extraHttpRequestParams?: any ) : Observable<models.DisponibleProveedor> {
        const path = this.basePath + '/disponibles-proveedor/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling disponiblesProveedorIdPut.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling disponiblesProveedorIdPut.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling disponiblesProveedorIdPut.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling disponiblesProveedorIdPut.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Obtiene el conjunto de disponibles-proveedor en forma de lista
     * Listado de disponibles-proveedor 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param q Trae los recursos de la consulta que cumplan con la cadena de busqueda en cualquiera de los campos del recurso
     */
    public disponiblesProveedorListarGet (eid: string, uid: string, q?: string, extraHttpRequestParams?: any ) : Observable<models.Listas> {
        const path = this.basePath + '/disponibles-proveedor/listar';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling disponiblesProveedorListarGet.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling disponiblesProveedorListarGet.');
        }
        if (q !== undefined) {
            queryParameters.set('q', String(q));
        }

            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Crear un DisponibleProveedor
     * \&quot;Crear un DisponibleProveedor\&quot; 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param body Disponible para Proveedores
     */
    public disponiblesProveedorPost (eid: string, uid: string, body: models.DisponibleProveedor, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/disponibles-proveedor';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling disponiblesProveedorPost.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling disponiblesProveedorPost.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling disponiblesProveedorPost.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Obtiene el conjunto de listas-precios
     * Listado de listas-precios 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param offset Numero del primer registro a cargar en la pagina Se presenta un ejemplo para la siguiente tabla:  |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**ausente** | Retorna los registros desde el primer registro de la consulta| http://api/recurso |   |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**valor** | Retorna los registros desde el registro indicado en el parametro| http://api/recurso?offset&#x3D;3 |  |Campo1|Campo2| |:---|:---| |3|nombre3| |4|nombre4| |5|nombre5| 
     * @param limit Numero de elementos a retornar en la consulta. Se presenta un ejemplo para la siguiente tabla:  |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**ausente** | El numero de registros por defecto del sistema, supongamos que es 20| http://api/recurso |   |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**valor** | Retorna el numero de registros indicados en el parametro| http://api/recurso?limit&#x3D;2 |  |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| 
     * @param sort Listado de nombres de campos para ordenar los resultados , se permite un maximo de 3 criterios de ordenamiento.  Prefijo|Descripcion|Ejemplo :---:|:---|---: +| Indica que el campo se debera nombrar ascendentemente| +nombre -| Indica que el campo se debera nombrar descendentemente| -nombre *vacio* | Indica que el campo se debera nombrar por defecto, es decir, ascendentemente| nombre **multiple** | Se puede enviar con multiple campos para filtrar | +nombre&amp;#124;-apellido&amp;#124;identificador 
     * @param fields Listado de nombres decampos a retornar de la consulta, separados por comas (,). Los campos requeridos siempre deben ser retornados, los ejemplos siguen la base presentada a continuacion :  &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor       campo3: valor       campo4: valor       campo5: valor     } &#x60;&#x60;&#x60;   |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**ausente** | Retorna por defecto todos los campos del recurso solicitado| http://api/recurso | &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor       campo3: valor       campo4: valor       campo5: valor     } &#x60;&#x60;&#x60; |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**vacio** | Retorna solamente los campos requeridos| http://api/recurso?fields | &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor     } &#x60;&#x60;&#x60;  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**multiple** | Retorna los campos requeridos más los campos indicados en el parametro | http://api/recurso?fields&#x3D;campo3,campo4 | &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor       campo3: valor       campo4: valor     } &#x60;&#x60;&#x60; 
     * @param q Trae los recursos de la consulta que cumplan con la cadena de busqueda en cualquiera de los campos del recurso
     * @param filter Filtra los registros de la consulta de acuerdo a la cadena de filtrado ingresada Se presenta un ejemplo para la siguiente tabla:  |Campo1|Campo2|Campo3| |:---|:---|:---| |1|nombre1|apellido1| |2|nombre2|apellido1| |3|nombre3|apellido2| |4|nombre2|apellido2| |5|nombre5|apellido1|  |Caso|Descripcion|Ejemplo | Encoded| |:---:|:---|---|---| |**ausente** | Retorna los registros de la consulta sin aplicar filtros o aplicando los filtros por defecto del sistema| http://api/recurso |http://api/recurso |   |Campo1|Campo2|Campo3| |:---|:---|:---| |1|nombre1|apellido1| |2|nombre2|apellido1| |3|nombre3|apellido2| |4|nombre2|apellido2| |5|nombre5|apellido1|  |Caso|Descripcion|Ejemplo | Encoded| |:---:|:---|---|---| |**Filtro simple** | Retorna el numero de registros indicados en el parametro | http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2) |http://api/recurso?filter&#x3D;campo2%20%3D%20nombre2 |  |Campo1|Campo2|Campo3| |:---|:---|:---| |2|nombre2|apellido1| |4|nombre2|apellido2|  |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| |**Filtro LIKE** | Retorna el numero de registros indicados en el parametro | http://api/recurso?filter&#x3D;campo3 like%llido2 |http://api/recurso?filter&#x3D;campo3%20like%20llido2%25 |  |Campo1|Campo2|Campo3| |:---|:---|:---| |3|nombre3|apellido2| |4|nombre2|apellido2|   |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| |compuerta ** OR ** | Ejecutando 2 condiciones con la compuerta **OR** |http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2) or (campo2 like %re3)| http://api/recurso?filter&#x3D;(campo2%20%3D%20nombre2)%20or%20(campo2%20like%20%25re3) |  |Campo1|Campo2|Campo3| |:---|:---|:---| |2|nombre2|apellido1| |3|nombre3|apellido2|  |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| |compuerta ** AND** | Ejecutando 2 condiciones con la compuerta **AND** |http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2) and (campo2 like %o2)| http://api/recurso?filter&#x3D;(campo2%20%3D%20nombre2)%20and%20(campo2%20like%20%25o2) |  |Campo1|Campo2|Campo3| |:---|:---|:---| |4|nombre2|apellido2|  |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| | **MULTI** | Multiples parametros de filtro **MULTI**  unidos implicitamente por una compuerta **AND**  | http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2)&amp;filter&#x3D;(campo2 like %o2)| http://api/recurso?filter&#x3D;(campo2%20%3D%20nombre2)&amp;filter&#x3D;(campo2%20like%20%25o2) |  |Campo1|Campo2|Campo3| |:---|:---|:---| |4|nombre2|apellido2| 
     */
    public listasPreciosGet (eid: string, uid: string, offset?: number, limit?: number, sort?: Array<string>, fields?: Array<string>, q?: string, filter?: Array<string>, extraHttpRequestParams?: any ) : Observable<models.ListasPreciosPaginados> {
        const path = this.basePath + '/listas-precios';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling listasPreciosGet.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling listasPreciosGet.');
        }
        if (offset !== undefined) {
            queryParameters.set('offset', String(offset));
        }

        if (limit !== undefined) {
            queryParameters.set('limit', String(limit));
        }

        if (sort !== undefined) {
            queryParameters.set('sort', String(sort));
        }

        if (fields !== undefined) {
            queryParameters.set('fields', String(fields));
        }

        if (q !== undefined) {
            queryParameters.set('q', String(q));
        }

        if (filter !== undefined) {
            queryParameters.set('filter', String(filter));
        }

            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Eliminar recurso ListaPrecios
     * Esta operación solo puede ser realizada por usuarios autorizados
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param id Parametros para identificar un recurso de forma unica
     */
    public listasPreciosIdDelete (eid: string, uid: string, id: string, extraHttpRequestParams?: any ) : Observable<models.ListaPrecios> {
        const path = this.basePath + '/listas-precios/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling listasPreciosIdDelete.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling listasPreciosIdDelete.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling listasPreciosIdDelete.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Información de un ListaPrecios
     * 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param id Parametros para identificar un recurso de forma unica
     */
    public listasPreciosIdGet (eid: string, uid: string, id: string, extraHttpRequestParams?: any ) : Observable<models.ListaPrecios> {
        const path = this.basePath + '/listas-precios/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling listasPreciosIdGet.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling listasPreciosIdGet.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling listasPreciosIdGet.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Actualizar Recurso ListaPrecios
     * Esta operación solo puede ser realizada por usuarios autorizados
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param id Parametros para identificar un recurso de forma unica
     * @param body Lista de Precios
     */
    public listasPreciosIdPut (eid: string, uid: string, id: string, body: models.ListaPrecios, extraHttpRequestParams?: any ) : Observable<models.ListaPrecios> {
        const path = this.basePath + '/listas-precios/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling listasPreciosIdPut.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling listasPreciosIdPut.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling listasPreciosIdPut.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling listasPreciosIdPut.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Obtiene el conjunto de listas-precios en forma de lista
     * Listado de listas-precios 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param q Trae los recursos de la consulta que cumplan con la cadena de busqueda en cualquiera de los campos del recurso
     */
    public listasPreciosListarGet (eid: string, uid: string, q?: string, extraHttpRequestParams?: any ) : Observable<models.Listas> {
        const path = this.basePath + '/listas-precios/listar';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling listasPreciosListarGet.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling listasPreciosListarGet.');
        }
        if (q !== undefined) {
            queryParameters.set('q', String(q));
        }

            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Crear un ListaPrecios
     * \&quot;Crear un ListaPrecios\&quot; 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param body Lista de Precios
     */
    public listasPreciosPost (eid: string, uid: string, body: models.ListaPrecios, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/listas-precios';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling listasPreciosPost.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling listasPreciosPost.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling listasPreciosPost.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Obtiene el conjunto de modulos
     * Listado de modulos 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param offset Numero del primer registro a cargar en la pagina Se presenta un ejemplo para la siguiente tabla:  |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**ausente** | Retorna los registros desde el primer registro de la consulta| http://api/recurso |   |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**valor** | Retorna los registros desde el registro indicado en el parametro| http://api/recurso?offset&#x3D;3 |  |Campo1|Campo2| |:---|:---| |3|nombre3| |4|nombre4| |5|nombre5| 
     * @param limit Numero de elementos a retornar en la consulta. Se presenta un ejemplo para la siguiente tabla:  |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**ausente** | El numero de registros por defecto del sistema, supongamos que es 20| http://api/recurso |   |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**valor** | Retorna el numero de registros indicados en el parametro| http://api/recurso?limit&#x3D;2 |  |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| 
     * @param sort Listado de nombres de campos para ordenar los resultados , se permite un maximo de 3 criterios de ordenamiento.  Prefijo|Descripcion|Ejemplo :---:|:---|---: +| Indica que el campo se debera nombrar ascendentemente| +nombre -| Indica que el campo se debera nombrar descendentemente| -nombre *vacio* | Indica que el campo se debera nombrar por defecto, es decir, ascendentemente| nombre **multiple** | Se puede enviar con multiple campos para filtrar | +nombre&amp;#124;-apellido&amp;#124;identificador 
     * @param fields Listado de nombres decampos a retornar de la consulta, separados por comas (,). Los campos requeridos siempre deben ser retornados, los ejemplos siguen la base presentada a continuacion :  &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor       campo3: valor       campo4: valor       campo5: valor     } &#x60;&#x60;&#x60;   |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**ausente** | Retorna por defecto todos los campos del recurso solicitado| http://api/recurso | &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor       campo3: valor       campo4: valor       campo5: valor     } &#x60;&#x60;&#x60; |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**vacio** | Retorna solamente los campos requeridos| http://api/recurso?fields | &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor     } &#x60;&#x60;&#x60;  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**multiple** | Retorna los campos requeridos más los campos indicados en el parametro | http://api/recurso?fields&#x3D;campo3,campo4 | &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor       campo3: valor       campo4: valor     } &#x60;&#x60;&#x60; 
     * @param q Trae los recursos de la consulta que cumplan con la cadena de busqueda en cualquiera de los campos del recurso
     * @param filter Filtra los registros de la consulta de acuerdo a la cadena de filtrado ingresada Se presenta un ejemplo para la siguiente tabla:  |Campo1|Campo2|Campo3| |:---|:---|:---| |1|nombre1|apellido1| |2|nombre2|apellido1| |3|nombre3|apellido2| |4|nombre2|apellido2| |5|nombre5|apellido1|  |Caso|Descripcion|Ejemplo | Encoded| |:---:|:---|---|---| |**ausente** | Retorna los registros de la consulta sin aplicar filtros o aplicando los filtros por defecto del sistema| http://api/recurso |http://api/recurso |   |Campo1|Campo2|Campo3| |:---|:---|:---| |1|nombre1|apellido1| |2|nombre2|apellido1| |3|nombre3|apellido2| |4|nombre2|apellido2| |5|nombre5|apellido1|  |Caso|Descripcion|Ejemplo | Encoded| |:---:|:---|---|---| |**Filtro simple** | Retorna el numero de registros indicados en el parametro | http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2) |http://api/recurso?filter&#x3D;campo2%20%3D%20nombre2 |  |Campo1|Campo2|Campo3| |:---|:---|:---| |2|nombre2|apellido1| |4|nombre2|apellido2|  |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| |**Filtro LIKE** | Retorna el numero de registros indicados en el parametro | http://api/recurso?filter&#x3D;campo3 like%llido2 |http://api/recurso?filter&#x3D;campo3%20like%20llido2%25 |  |Campo1|Campo2|Campo3| |:---|:---|:---| |3|nombre3|apellido2| |4|nombre2|apellido2|   |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| |compuerta ** OR ** | Ejecutando 2 condiciones con la compuerta **OR** |http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2) or (campo2 like %re3)| http://api/recurso?filter&#x3D;(campo2%20%3D%20nombre2)%20or%20(campo2%20like%20%25re3) |  |Campo1|Campo2|Campo3| |:---|:---|:---| |2|nombre2|apellido1| |3|nombre3|apellido2|  |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| |compuerta ** AND** | Ejecutando 2 condiciones con la compuerta **AND** |http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2) and (campo2 like %o2)| http://api/recurso?filter&#x3D;(campo2%20%3D%20nombre2)%20and%20(campo2%20like%20%25o2) |  |Campo1|Campo2|Campo3| |:---|:---|:---| |4|nombre2|apellido2|  |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| | **MULTI** | Multiples parametros de filtro **MULTI**  unidos implicitamente por una compuerta **AND**  | http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2)&amp;filter&#x3D;(campo2 like %o2)| http://api/recurso?filter&#x3D;(campo2%20%3D%20nombre2)&amp;filter&#x3D;(campo2%20like%20%25o2) |  |Campo1|Campo2|Campo3| |:---|:---|:---| |4|nombre2|apellido2| 
     */
    public modulosGet (eid: string, offset?: number, limit?: number, sort?: Array<string>, fields?: Array<string>, q?: string, filter?: Array<string>, extraHttpRequestParams?: any ) : Observable<models.Modulos> {
        const path = this.basePath + '/modulos';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling modulosGet.');
        }
        if (offset !== undefined) {
            queryParameters.set('offset', String(offset));
        }

        if (limit !== undefined) {
            queryParameters.set('limit', String(limit));
        }

        if (sort !== undefined) {
            queryParameters.set('sort', String(sort));
        }

        if (fields !== undefined) {
            queryParameters.set('fields', String(fields));
        }

        if (q !== undefined) {
            queryParameters.set('q', String(q));
        }

        if (filter !== undefined) {
            queryParameters.set('filter', String(filter));
        }

            headerParams.set('eid', String(eid));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Obtiene el conjunto de modulos en forma de lista
     * Listado de modulos 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     */
    public modulosListarGet (eid: string, uid: string, extraHttpRequestParams?: any ) : Observable<models.Listas> {
        const path = this.basePath + '/modulos/listar';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling modulosListarGet.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling modulosListarGet.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Obtiene el conjunto de monedas
     * Listado de monedas 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param offset Numero del primer registro a cargar en la pagina Se presenta un ejemplo para la siguiente tabla:  |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**ausente** | Retorna los registros desde el primer registro de la consulta| http://api/recurso |   |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**valor** | Retorna los registros desde el registro indicado en el parametro| http://api/recurso?offset&#x3D;3 |  |Campo1|Campo2| |:---|:---| |3|nombre3| |4|nombre4| |5|nombre5| 
     * @param limit Numero de elementos a retornar en la consulta. Se presenta un ejemplo para la siguiente tabla:  |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**ausente** | El numero de registros por defecto del sistema, supongamos que es 20| http://api/recurso |   |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**valor** | Retorna el numero de registros indicados en el parametro| http://api/recurso?limit&#x3D;2 |  |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| 
     * @param sort Listado de nombres de campos para ordenar los resultados , se permite un maximo de 3 criterios de ordenamiento.  Prefijo|Descripcion|Ejemplo :---:|:---|---: +| Indica que el campo se debera nombrar ascendentemente| +nombre -| Indica que el campo se debera nombrar descendentemente| -nombre *vacio* | Indica que el campo se debera nombrar por defecto, es decir, ascendentemente| nombre **multiple** | Se puede enviar con multiple campos para filtrar | +nombre&amp;#124;-apellido&amp;#124;identificador 
     * @param fields Listado de nombres decampos a retornar de la consulta, separados por comas (,). Los campos requeridos siempre deben ser retornados, los ejemplos siguen la base presentada a continuacion :  &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor       campo3: valor       campo4: valor       campo5: valor     } &#x60;&#x60;&#x60;   |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**ausente** | Retorna por defecto todos los campos del recurso solicitado| http://api/recurso | &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor       campo3: valor       campo4: valor       campo5: valor     } &#x60;&#x60;&#x60; |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**vacio** | Retorna solamente los campos requeridos| http://api/recurso?fields | &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor     } &#x60;&#x60;&#x60;  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**multiple** | Retorna los campos requeridos más los campos indicados en el parametro | http://api/recurso?fields&#x3D;campo3,campo4 | &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor       campo3: valor       campo4: valor     } &#x60;&#x60;&#x60; 
     * @param q Trae los recursos de la consulta que cumplan con la cadena de busqueda en cualquiera de los campos del recurso
     * @param filter Filtra los registros de la consulta de acuerdo a la cadena de filtrado ingresada Se presenta un ejemplo para la siguiente tabla:  |Campo1|Campo2|Campo3| |:---|:---|:---| |1|nombre1|apellido1| |2|nombre2|apellido1| |3|nombre3|apellido2| |4|nombre2|apellido2| |5|nombre5|apellido1|  |Caso|Descripcion|Ejemplo | Encoded| |:---:|:---|---|---| |**ausente** | Retorna los registros de la consulta sin aplicar filtros o aplicando los filtros por defecto del sistema| http://api/recurso |http://api/recurso |   |Campo1|Campo2|Campo3| |:---|:---|:---| |1|nombre1|apellido1| |2|nombre2|apellido1| |3|nombre3|apellido2| |4|nombre2|apellido2| |5|nombre5|apellido1|  |Caso|Descripcion|Ejemplo | Encoded| |:---:|:---|---|---| |**Filtro simple** | Retorna el numero de registros indicados en el parametro | http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2) |http://api/recurso?filter&#x3D;campo2%20%3D%20nombre2 |  |Campo1|Campo2|Campo3| |:---|:---|:---| |2|nombre2|apellido1| |4|nombre2|apellido2|  |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| |**Filtro LIKE** | Retorna el numero de registros indicados en el parametro | http://api/recurso?filter&#x3D;campo3 like%llido2 |http://api/recurso?filter&#x3D;campo3%20like%20llido2%25 |  |Campo1|Campo2|Campo3| |:---|:---|:---| |3|nombre3|apellido2| |4|nombre2|apellido2|   |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| |compuerta ** OR ** | Ejecutando 2 condiciones con la compuerta **OR** |http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2) or (campo2 like %re3)| http://api/recurso?filter&#x3D;(campo2%20%3D%20nombre2)%20or%20(campo2%20like%20%25re3) |  |Campo1|Campo2|Campo3| |:---|:---|:---| |2|nombre2|apellido1| |3|nombre3|apellido2|  |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| |compuerta ** AND** | Ejecutando 2 condiciones con la compuerta **AND** |http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2) and (campo2 like %o2)| http://api/recurso?filter&#x3D;(campo2%20%3D%20nombre2)%20and%20(campo2%20like%20%25o2) |  |Campo1|Campo2|Campo3| |:---|:---|:---| |4|nombre2|apellido2|  |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| | **MULTI** | Multiples parametros de filtro **MULTI**  unidos implicitamente por una compuerta **AND**  | http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2)&amp;filter&#x3D;(campo2 like %o2)| http://api/recurso?filter&#x3D;(campo2%20%3D%20nombre2)&amp;filter&#x3D;(campo2%20like%20%25o2) |  |Campo1|Campo2|Campo3| |:---|:---|:---| |4|nombre2|apellido2| 
     */
    public monedasGet (eid: string, uid: string, offset?: number, limit?: number, sort?: Array<string>, fields?: Array<string>, q?: string, filter?: Array<string>, extraHttpRequestParams?: any ) : Observable<models.MonedasPaginados> {
        const path = this.basePath + '/monedas';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling monedasGet.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling monedasGet.');
        }
        if (offset !== undefined) {
            queryParameters.set('offset', String(offset));
        }

        if (limit !== undefined) {
            queryParameters.set('limit', String(limit));
        }

        if (sort !== undefined) {
            queryParameters.set('sort', String(sort));
        }

        if (fields !== undefined) {
            queryParameters.set('fields', String(fields));
        }

        if (q !== undefined) {
            queryParameters.set('q', String(q));
        }

        if (filter !== undefined) {
            queryParameters.set('filter', String(filter));
        }

            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Eliminar recurso Moneda
     * Esta operación solo puede ser realizada por usuarios autorizados
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param id Parametros para identificar un recurso de forma unica
     */
    public monedasIdDelete (eid: string, uid: string, id: string, extraHttpRequestParams?: any ) : Observable<models.Moneda> {
        const path = this.basePath + '/monedas/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling monedasIdDelete.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling monedasIdDelete.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling monedasIdDelete.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Información de un Moneda
     * 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param id Parametros para identificar un recurso de forma unica
     */
    public monedasIdGet (eid: string, uid: string, id: string, extraHttpRequestParams?: any ) : Observable<models.Moneda> {
        const path = this.basePath + '/monedas/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling monedasIdGet.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling monedasIdGet.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling monedasIdGet.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Actualizar Recurso Moneda
     * Esta operación solo puede ser realizada por usuarios autorizados
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param id Parametros para identificar un recurso de forma unica
     * @param body Moneda
     */
    public monedasIdPut (eid: string, uid: string, id: string, body: models.Moneda, extraHttpRequestParams?: any ) : Observable<models.Moneda> {
        const path = this.basePath + '/monedas/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling monedasIdPut.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling monedasIdPut.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling monedasIdPut.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling monedasIdPut.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Obtiene el conjunto de monedas en forma de lista
     * Listado de monedas 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param q Trae los recursos de la consulta que cumplan con la cadena de busqueda en cualquiera de los campos del recurso
     */
    public monedasListarGet (eid: string, uid: string, q?: string, extraHttpRequestParams?: any ) : Observable<models.Listas> {
        const path = this.basePath + '/monedas/listar';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling monedasListarGet.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling monedasListarGet.');
        }
        if (q !== undefined) {
            queryParameters.set('q', String(q));
        }

            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Crear un Moneda
     * \&quot;Crear un Moneda\&quot; 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param body Moneda
     */
    public monedasPost (eid: string, uid: string, body: models.Moneda, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/monedas';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling monedasPost.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling monedasPost.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling monedasPost.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Obtiene el conjunto de municipios
     * Listado de municipios 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param offset Numero del primer registro a cargar en la pagina Se presenta un ejemplo para la siguiente tabla:  |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**ausente** | Retorna los registros desde el primer registro de la consulta| http://api/recurso |   |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**valor** | Retorna los registros desde el registro indicado en el parametro| http://api/recurso?offset&#x3D;3 |  |Campo1|Campo2| |:---|:---| |3|nombre3| |4|nombre4| |5|nombre5| 
     * @param limit Numero de elementos a retornar en la consulta. Se presenta un ejemplo para la siguiente tabla:  |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**ausente** | El numero de registros por defecto del sistema, supongamos que es 20| http://api/recurso |   |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**valor** | Retorna el numero de registros indicados en el parametro| http://api/recurso?limit&#x3D;2 |  |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| 
     * @param sort Listado de nombres de campos para ordenar los resultados , se permite un maximo de 3 criterios de ordenamiento.  Prefijo|Descripcion|Ejemplo :---:|:---|---: +| Indica que el campo se debera nombrar ascendentemente| +nombre -| Indica que el campo se debera nombrar descendentemente| -nombre *vacio* | Indica que el campo se debera nombrar por defecto, es decir, ascendentemente| nombre **multiple** | Se puede enviar con multiple campos para filtrar | +nombre&amp;#124;-apellido&amp;#124;identificador 
     * @param fields Listado de nombres decampos a retornar de la consulta, separados por comas (,). Los campos requeridos siempre deben ser retornados, los ejemplos siguen la base presentada a continuacion :  &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor       campo3: valor       campo4: valor       campo5: valor     } &#x60;&#x60;&#x60;   |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**ausente** | Retorna por defecto todos los campos del recurso solicitado| http://api/recurso | &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor       campo3: valor       campo4: valor       campo5: valor     } &#x60;&#x60;&#x60; |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**vacio** | Retorna solamente los campos requeridos| http://api/recurso?fields | &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor     } &#x60;&#x60;&#x60;  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**multiple** | Retorna los campos requeridos más los campos indicados en el parametro | http://api/recurso?fields&#x3D;campo3,campo4 | &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor       campo3: valor       campo4: valor     } &#x60;&#x60;&#x60; 
     * @param q Trae los recursos de la consulta que cumplan con la cadena de busqueda en cualquiera de los campos del recurso
     * @param filter Filtra los registros de la consulta de acuerdo a la cadena de filtrado ingresada Se presenta un ejemplo para la siguiente tabla:  |Campo1|Campo2|Campo3| |:---|:---|:---| |1|nombre1|apellido1| |2|nombre2|apellido1| |3|nombre3|apellido2| |4|nombre2|apellido2| |5|nombre5|apellido1|  |Caso|Descripcion|Ejemplo | Encoded| |:---:|:---|---|---| |**ausente** | Retorna los registros de la consulta sin aplicar filtros o aplicando los filtros por defecto del sistema| http://api/recurso |http://api/recurso |   |Campo1|Campo2|Campo3| |:---|:---|:---| |1|nombre1|apellido1| |2|nombre2|apellido1| |3|nombre3|apellido2| |4|nombre2|apellido2| |5|nombre5|apellido1|  |Caso|Descripcion|Ejemplo | Encoded| |:---:|:---|---|---| |**Filtro simple** | Retorna el numero de registros indicados en el parametro | http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2) |http://api/recurso?filter&#x3D;campo2%20%3D%20nombre2 |  |Campo1|Campo2|Campo3| |:---|:---|:---| |2|nombre2|apellido1| |4|nombre2|apellido2|  |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| |**Filtro LIKE** | Retorna el numero de registros indicados en el parametro | http://api/recurso?filter&#x3D;campo3 like%llido2 |http://api/recurso?filter&#x3D;campo3%20like%20llido2%25 |  |Campo1|Campo2|Campo3| |:---|:---|:---| |3|nombre3|apellido2| |4|nombre2|apellido2|   |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| |compuerta ** OR ** | Ejecutando 2 condiciones con la compuerta **OR** |http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2) or (campo2 like %re3)| http://api/recurso?filter&#x3D;(campo2%20%3D%20nombre2)%20or%20(campo2%20like%20%25re3) |  |Campo1|Campo2|Campo3| |:---|:---|:---| |2|nombre2|apellido1| |3|nombre3|apellido2|  |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| |compuerta ** AND** | Ejecutando 2 condiciones con la compuerta **AND** |http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2) and (campo2 like %o2)| http://api/recurso?filter&#x3D;(campo2%20%3D%20nombre2)%20and%20(campo2%20like%20%25o2) |  |Campo1|Campo2|Campo3| |:---|:---|:---| |4|nombre2|apellido2|  |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| | **MULTI** | Multiples parametros de filtro **MULTI**  unidos implicitamente por una compuerta **AND**  | http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2)&amp;filter&#x3D;(campo2 like %o2)| http://api/recurso?filter&#x3D;(campo2%20%3D%20nombre2)&amp;filter&#x3D;(campo2%20like%20%25o2) |  |Campo1|Campo2|Campo3| |:---|:---|:---| |4|nombre2|apellido2| 
     */
    public municipiosGet (eid: string, uid: string, offset?: number, limit?: number, sort?: Array<string>, fields?: Array<string>, q?: string, filter?: Array<string>, extraHttpRequestParams?: any ) : Observable<models.MunicipiosPaginados> {
        const path = this.basePath + '/municipios';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling municipiosGet.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling municipiosGet.');
        }
        if (offset !== undefined) {
            queryParameters.set('offset', String(offset));
        }

        if (limit !== undefined) {
            queryParameters.set('limit', String(limit));
        }

        if (sort !== undefined) {
            queryParameters.set('sort', String(sort));
        }

        if (fields !== undefined) {
            queryParameters.set('fields', String(fields));
        }

        if (q !== undefined) {
            queryParameters.set('q', String(q));
        }

        if (filter !== undefined) {
            queryParameters.set('filter', String(filter));
        }

            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Eliminar recurso Municipio
     * Esta operación solo puede ser realizada por usuarios autorizados
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param id Parametros para identificar un recurso de forma unica
     */
    public municipiosIdDelete (eid: string, uid: string, id: string, extraHttpRequestParams?: any ) : Observable<models.Municipio> {
        const path = this.basePath + '/municipios/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling municipiosIdDelete.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling municipiosIdDelete.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling municipiosIdDelete.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Información de un Municipio
     * 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param id Parametros para identificar un recurso de forma unica
     */
    public municipiosIdGet (eid: string, uid: string, id: string, extraHttpRequestParams?: any ) : Observable<models.Municipio> {
        const path = this.basePath + '/municipios/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling municipiosIdGet.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling municipiosIdGet.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling municipiosIdGet.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Actualizar Recurso Municipio
     * Esta operación solo puede ser realizada por usuarios autorizados
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param id Parametros para identificar un recurso de forma unica
     * @param body Opcion
     */
    public municipiosIdPut (eid: string, uid: string, id: string, body: models.Municipio, extraHttpRequestParams?: any ) : Observable<models.Municipio> {
        const path = this.basePath + '/municipios/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling municipiosIdPut.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling municipiosIdPut.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling municipiosIdPut.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling municipiosIdPut.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Obtiene el conjunto de municipios en forma de lista
     * Listado de municipios 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param q Trae los recursos de la consulta que cumplan con la cadena de busqueda en cualquiera de los campos del recurso
     */
    public municipiosListarGet (eid: string, uid: string, q?: string, extraHttpRequestParams?: any ) : Observable<models.Listas> {
        const path = this.basePath + '/municipios/listar';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling municipiosListarGet.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling municipiosListarGet.');
        }
        if (q !== undefined) {
            queryParameters.set('q', String(q));
        }

            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Crear un Municipio
     * \&quot;Crear un Municipio\&quot; 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param body Opcion
     */
    public municipiosPost (eid: string, uid: string, body: models.Municipio, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/municipios';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling municipiosPost.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling municipiosPost.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling municipiosPost.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Obtiene el conjunto de opciones
     * Listado de opciones 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param offset Numero del primer registro a cargar en la pagina Se presenta un ejemplo para la siguiente tabla:  |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**ausente** | Retorna los registros desde el primer registro de la consulta| http://api/recurso |   |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**valor** | Retorna los registros desde el registro indicado en el parametro| http://api/recurso?offset&#x3D;3 |  |Campo1|Campo2| |:---|:---| |3|nombre3| |4|nombre4| |5|nombre5| 
     * @param limit Numero de elementos a retornar en la consulta. Se presenta un ejemplo para la siguiente tabla:  |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**ausente** | El numero de registros por defecto del sistema, supongamos que es 20| http://api/recurso |   |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**valor** | Retorna el numero de registros indicados en el parametro| http://api/recurso?limit&#x3D;2 |  |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| 
     * @param sort Listado de nombres de campos para ordenar los resultados , se permite un maximo de 3 criterios de ordenamiento.  Prefijo|Descripcion|Ejemplo :---:|:---|---: +| Indica que el campo se debera nombrar ascendentemente| +nombre -| Indica que el campo se debera nombrar descendentemente| -nombre *vacio* | Indica que el campo se debera nombrar por defecto, es decir, ascendentemente| nombre **multiple** | Se puede enviar con multiple campos para filtrar | +nombre&amp;#124;-apellido&amp;#124;identificador 
     * @param fields Listado de nombres decampos a retornar de la consulta, separados por comas (,). Los campos requeridos siempre deben ser retornados, los ejemplos siguen la base presentada a continuacion :  &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor       campo3: valor       campo4: valor       campo5: valor     } &#x60;&#x60;&#x60;   |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**ausente** | Retorna por defecto todos los campos del recurso solicitado| http://api/recurso | &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor       campo3: valor       campo4: valor       campo5: valor     } &#x60;&#x60;&#x60; |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**vacio** | Retorna solamente los campos requeridos| http://api/recurso?fields | &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor     } &#x60;&#x60;&#x60;  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**multiple** | Retorna los campos requeridos más los campos indicados en el parametro | http://api/recurso?fields&#x3D;campo3,campo4 | &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor       campo3: valor       campo4: valor     } &#x60;&#x60;&#x60; 
     * @param q Trae los recursos de la consulta que cumplan con la cadena de busqueda en cualquiera de los campos del recurso
     * @param filter Filtra los registros de la consulta de acuerdo a la cadena de filtrado ingresada Se presenta un ejemplo para la siguiente tabla:  |Campo1|Campo2|Campo3| |:---|:---|:---| |1|nombre1|apellido1| |2|nombre2|apellido1| |3|nombre3|apellido2| |4|nombre2|apellido2| |5|nombre5|apellido1|  |Caso|Descripcion|Ejemplo | Encoded| |:---:|:---|---|---| |**ausente** | Retorna los registros de la consulta sin aplicar filtros o aplicando los filtros por defecto del sistema| http://api/recurso |http://api/recurso |   |Campo1|Campo2|Campo3| |:---|:---|:---| |1|nombre1|apellido1| |2|nombre2|apellido1| |3|nombre3|apellido2| |4|nombre2|apellido2| |5|nombre5|apellido1|  |Caso|Descripcion|Ejemplo | Encoded| |:---:|:---|---|---| |**Filtro simple** | Retorna el numero de registros indicados en el parametro | http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2) |http://api/recurso?filter&#x3D;campo2%20%3D%20nombre2 |  |Campo1|Campo2|Campo3| |:---|:---|:---| |2|nombre2|apellido1| |4|nombre2|apellido2|  |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| |**Filtro LIKE** | Retorna el numero de registros indicados en el parametro | http://api/recurso?filter&#x3D;campo3 like%llido2 |http://api/recurso?filter&#x3D;campo3%20like%20llido2%25 |  |Campo1|Campo2|Campo3| |:---|:---|:---| |3|nombre3|apellido2| |4|nombre2|apellido2|   |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| |compuerta ** OR ** | Ejecutando 2 condiciones con la compuerta **OR** |http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2) or (campo2 like %re3)| http://api/recurso?filter&#x3D;(campo2%20%3D%20nombre2)%20or%20(campo2%20like%20%25re3) |  |Campo1|Campo2|Campo3| |:---|:---|:---| |2|nombre2|apellido1| |3|nombre3|apellido2|  |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| |compuerta ** AND** | Ejecutando 2 condiciones con la compuerta **AND** |http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2) and (campo2 like %o2)| http://api/recurso?filter&#x3D;(campo2%20%3D%20nombre2)%20and%20(campo2%20like%20%25o2) |  |Campo1|Campo2|Campo3| |:---|:---|:---| |4|nombre2|apellido2|  |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| | **MULTI** | Multiples parametros de filtro **MULTI**  unidos implicitamente por una compuerta **AND**  | http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2)&amp;filter&#x3D;(campo2 like %o2)| http://api/recurso?filter&#x3D;(campo2%20%3D%20nombre2)&amp;filter&#x3D;(campo2%20like%20%25o2) |  |Campo1|Campo2|Campo3| |:---|:---|:---| |4|nombre2|apellido2| 
     */
    public opcionesGet (eid: string, uid: string, offset?: number, limit?: number, sort?: Array<string>, fields?: Array<string>, q?: string, filter?: Array<string>, extraHttpRequestParams?: any ) : Observable<models.OpcionesPaginados> {
        const path = this.basePath + '/opciones';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling opcionesGet.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling opcionesGet.');
        }
        if (offset !== undefined) {
            queryParameters.set('offset', String(offset));
        }

        if (limit !== undefined) {
            queryParameters.set('limit', String(limit));
        }

        if (sort !== undefined) {
            queryParameters.set('sort', String(sort));
        }

        if (fields !== undefined) {
            queryParameters.set('fields', String(fields));
        }

        if (q !== undefined) {
            queryParameters.set('q', String(q));
        }

        if (filter !== undefined) {
            queryParameters.set('filter', String(filter));
        }

            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Eliminar recurso Opcion
     * Esta operación solo puede ser realizada por usuarios autorizados
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param id Parametros para identificar un recurso de forma unica
     */
    public opcionesIdDelete (eid: string, uid: string, id: string, extraHttpRequestParams?: any ) : Observable<models.Opcion> {
        const path = this.basePath + '/opciones/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling opcionesIdDelete.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling opcionesIdDelete.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling opcionesIdDelete.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Información de un Opcion
     * 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param id Parametros para identificar un recurso de forma unica
     */
    public opcionesIdGet (eid: string, uid: string, id: string, extraHttpRequestParams?: any ) : Observable<models.Opcion> {
        const path = this.basePath + '/opciones/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling opcionesIdGet.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling opcionesIdGet.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling opcionesIdGet.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Actualizar Recurso Opcion
     * Esta operación solo puede ser realizada por usuarios autorizados
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param id Parametros para identificar un recurso de forma unica
     * @param body Opcion 
     */
    public opcionesIdPut (eid: string, uid: string, id: string, body: models.Opcion, extraHttpRequestParams?: any ) : Observable<models.Opcion> {
        const path = this.basePath + '/opciones/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling opcionesIdPut.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling opcionesIdPut.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling opcionesIdPut.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling opcionesIdPut.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Obtiene el conjunto de opciones en forma de lista
     * Listado de opciones 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param q Trae los recursos de la consulta que cumplan con la cadena de busqueda en cualquiera de los campos del recurso
     */
    public opcionesListarGet (eid: string, uid: string, q?: string, extraHttpRequestParams?: any ) : Observable<models.Listas> {
        const path = this.basePath + '/opciones/listar';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling opcionesListarGet.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling opcionesListarGet.');
        }
        if (q !== undefined) {
            queryParameters.set('q', String(q));
        }

            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Crear un Opcion
     * \&quot;Crear un Opcion\&quot; 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param body Opcion 
     */
    public opcionesPost (eid: string, uid: string, body: models.Opcion, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/opciones';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling opcionesPost.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling opcionesPost.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling opcionesPost.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Trae el listado de las ultimas opciones utilizadas por el usuario
     * Listado de opciones 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param limit Numero de elementos a retornar en la consulta. Se presenta un ejemplo para la siguiente tabla:  |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**ausente** | El numero de registros por defecto del sistema, supongamos que es 20| http://api/recurso |   |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**valor** | Retorna el numero de registros indicados en el parametro| http://api/recurso?limit&#x3D;2 |  |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| 
     */
    public opcionesRecientesGet (eid: string, uid: string, limit?: number, extraHttpRequestParams?: any ) : Observable<models.Listas> {
        const path = this.basePath + '/opciones/recientes';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling opcionesRecientesGet.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling opcionesRecientesGet.');
        }
        if (limit !== undefined) {
            queryParameters.set('limit', String(limit));
        }

            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Obtiene el conjunto de paises
     * Listado de paises 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param offset Numero del primer registro a cargar en la pagina Se presenta un ejemplo para la siguiente tabla:  |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**ausente** | Retorna los registros desde el primer registro de la consulta| http://api/recurso |   |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**valor** | Retorna los registros desde el registro indicado en el parametro| http://api/recurso?offset&#x3D;3 |  |Campo1|Campo2| |:---|:---| |3|nombre3| |4|nombre4| |5|nombre5| 
     * @param limit Numero de elementos a retornar en la consulta. Se presenta un ejemplo para la siguiente tabla:  |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**ausente** | El numero de registros por defecto del sistema, supongamos que es 20| http://api/recurso |   |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**valor** | Retorna el numero de registros indicados en el parametro| http://api/recurso?limit&#x3D;2 |  |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| 
     * @param sort Listado de nombres de campos para ordenar los resultados , se permite un maximo de 3 criterios de ordenamiento.  Prefijo|Descripcion|Ejemplo :---:|:---|---: +| Indica que el campo se debera nombrar ascendentemente| +nombre -| Indica que el campo se debera nombrar descendentemente| -nombre *vacio* | Indica que el campo se debera nombrar por defecto, es decir, ascendentemente| nombre **multiple** | Se puede enviar con multiple campos para filtrar | +nombre&amp;#124;-apellido&amp;#124;identificador 
     * @param fields Listado de nombres decampos a retornar de la consulta, separados por comas (,). Los campos requeridos siempre deben ser retornados, los ejemplos siguen la base presentada a continuacion :  &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor       campo3: valor       campo4: valor       campo5: valor     } &#x60;&#x60;&#x60;   |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**ausente** | Retorna por defecto todos los campos del recurso solicitado| http://api/recurso | &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor       campo3: valor       campo4: valor       campo5: valor     } &#x60;&#x60;&#x60; |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**vacio** | Retorna solamente los campos requeridos| http://api/recurso?fields | &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor     } &#x60;&#x60;&#x60;  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**multiple** | Retorna los campos requeridos más los campos indicados en el parametro | http://api/recurso?fields&#x3D;campo3,campo4 | &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor       campo3: valor       campo4: valor     } &#x60;&#x60;&#x60; 
     * @param q Trae los recursos de la consulta que cumplan con la cadena de busqueda en cualquiera de los campos del recurso
     * @param filter Filtra los registros de la consulta de acuerdo a la cadena de filtrado ingresada Se presenta un ejemplo para la siguiente tabla:  |Campo1|Campo2|Campo3| |:---|:---|:---| |1|nombre1|apellido1| |2|nombre2|apellido1| |3|nombre3|apellido2| |4|nombre2|apellido2| |5|nombre5|apellido1|  |Caso|Descripcion|Ejemplo | Encoded| |:---:|:---|---|---| |**ausente** | Retorna los registros de la consulta sin aplicar filtros o aplicando los filtros por defecto del sistema| http://api/recurso |http://api/recurso |   |Campo1|Campo2|Campo3| |:---|:---|:---| |1|nombre1|apellido1| |2|nombre2|apellido1| |3|nombre3|apellido2| |4|nombre2|apellido2| |5|nombre5|apellido1|  |Caso|Descripcion|Ejemplo | Encoded| |:---:|:---|---|---| |**Filtro simple** | Retorna el numero de registros indicados en el parametro | http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2) |http://api/recurso?filter&#x3D;campo2%20%3D%20nombre2 |  |Campo1|Campo2|Campo3| |:---|:---|:---| |2|nombre2|apellido1| |4|nombre2|apellido2|  |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| |**Filtro LIKE** | Retorna el numero de registros indicados en el parametro | http://api/recurso?filter&#x3D;campo3 like%llido2 |http://api/recurso?filter&#x3D;campo3%20like%20llido2%25 |  |Campo1|Campo2|Campo3| |:---|:---|:---| |3|nombre3|apellido2| |4|nombre2|apellido2|   |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| |compuerta ** OR ** | Ejecutando 2 condiciones con la compuerta **OR** |http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2) or (campo2 like %re3)| http://api/recurso?filter&#x3D;(campo2%20%3D%20nombre2)%20or%20(campo2%20like%20%25re3) |  |Campo1|Campo2|Campo3| |:---|:---|:---| |2|nombre2|apellido1| |3|nombre3|apellido2|  |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| |compuerta ** AND** | Ejecutando 2 condiciones con la compuerta **AND** |http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2) and (campo2 like %o2)| http://api/recurso?filter&#x3D;(campo2%20%3D%20nombre2)%20and%20(campo2%20like%20%25o2) |  |Campo1|Campo2|Campo3| |:---|:---|:---| |4|nombre2|apellido2|  |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| | **MULTI** | Multiples parametros de filtro **MULTI**  unidos implicitamente por una compuerta **AND**  | http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2)&amp;filter&#x3D;(campo2 like %o2)| http://api/recurso?filter&#x3D;(campo2%20%3D%20nombre2)&amp;filter&#x3D;(campo2%20like%20%25o2) |  |Campo1|Campo2|Campo3| |:---|:---|:---| |4|nombre2|apellido2| 
     */
    public paisesGet (eid: string, uid: string, offset?: number, limit?: number, sort?: Array<string>, fields?: Array<string>, q?: string, filter?: Array<string>, extraHttpRequestParams?: any ) : Observable<models.PaisesPaginados> {
        const path = this.basePath + '/paises';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling paisesGet.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling paisesGet.');
        }
        if (offset !== undefined) {
            queryParameters.set('offset', String(offset));
        }

        if (limit !== undefined) {
            queryParameters.set('limit', String(limit));
        }

        if (sort !== undefined) {
            queryParameters.set('sort', String(sort));
        }

        if (fields !== undefined) {
            queryParameters.set('fields', String(fields));
        }

        if (q !== undefined) {
            queryParameters.set('q', String(q));
        }

        if (filter !== undefined) {
            queryParameters.set('filter', String(filter));
        }

            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

            headerParams.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Eliminar recurso Pais
     * Esta operación solo puede ser realizada por usuarios autorizados
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param id Parametros para identificar un recurso de forma unica
     */
    public paisesIdDelete (eid: string, uid: string, id: string, extraHttpRequestParams?: any ) : Observable<models.Pais> {
        const path = this.basePath + '/paises/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling paisesIdDelete.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling paisesIdDelete.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling paisesIdDelete.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Información de un Pais
     * 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param id Parametros para identificar un recurso de forma unica
     */
    public paisesIdGet (eid: string, uid: string, id: string, extraHttpRequestParams?: any ) : Observable<models.Pais> {
        const path = this.basePath + '/paises/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling paisesIdGet.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling paisesIdGet.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling paisesIdGet.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Actualizar Recurso Pais
     * Esta operación solo puede ser realizada por usuarios autorizados
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param id Parametros para identificar un recurso de forma unica
     * @param body Pais 
     */
    public paisesIdPut (eid: string, uid: string, id: string, body: models.Pais, extraHttpRequestParams?: any ) : Observable<models.Pais> {
        const path = this.basePath + '/paises/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling paisesIdPut.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling paisesIdPut.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling paisesIdPut.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling paisesIdPut.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Obtiene el conjunto de paises en forma de lista
     * Listado de paises 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param q Trae los recursos de la consulta que cumplan con la cadena de busqueda en cualquiera de los campos del recurso
     */
    public paisesListarGet (eid: string, uid: string, q?: string, extraHttpRequestParams?: any ) : Observable<models.Listas> {
        const path = this.basePath + '/paises/listar';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling paisesListarGet.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling paisesListarGet.');
        }
        if (q !== undefined) {
            queryParameters.set('q', String(q));
        }

            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Crear un Pais
     * \&quot;Crear un Pais\&quot; 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param body Pais 
     */
    public paisesPost (eid: string, uid: string, body: models.Pais, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/paises';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling paisesPost.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling paisesPost.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling paisesPost.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Obtiene el conjunto de quotes
     * Listado de quotes 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param offset Numero del primer registro a cargar en la pagina Se presenta un ejemplo para la siguiente tabla:  |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**ausente** | Retorna los registros desde el primer registro de la consulta| http://api/recurso |   |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**valor** | Retorna los registros desde el registro indicado en el parametro| http://api/recurso?offset&#x3D;3 |  |Campo1|Campo2| |:---|:---| |3|nombre3| |4|nombre4| |5|nombre5| 
     * @param limit Numero de elementos a retornar en la consulta. Se presenta un ejemplo para la siguiente tabla:  |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**ausente** | El numero de registros por defecto del sistema, supongamos que es 20| http://api/recurso |   |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**valor** | Retorna el numero de registros indicados en el parametro| http://api/recurso?limit&#x3D;2 |  |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| 
     * @param sort Listado de nombres de campos para ordenar los resultados , se permite un maximo de 3 criterios de ordenamiento.  Prefijo|Descripcion|Ejemplo :---:|:---|---: +| Indica que el campo se debera nombrar ascendentemente| +nombre -| Indica que el campo se debera nombrar descendentemente| -nombre *vacio* | Indica que el campo se debera nombrar por defecto, es decir, ascendentemente| nombre **multiple** | Se puede enviar con multiple campos para filtrar | +nombre&amp;#124;-apellido&amp;#124;identificador 
     * @param fields Listado de nombres decampos a retornar de la consulta, separados por comas (,). Los campos requeridos siempre deben ser retornados, los ejemplos siguen la base presentada a continuacion :  &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor       campo3: valor       campo4: valor       campo5: valor     } &#x60;&#x60;&#x60;   |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**ausente** | Retorna por defecto todos los campos del recurso solicitado| http://api/recurso | &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor       campo3: valor       campo4: valor       campo5: valor     } &#x60;&#x60;&#x60; |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**vacio** | Retorna solamente los campos requeridos| http://api/recurso?fields | &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor     } &#x60;&#x60;&#x60;  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**multiple** | Retorna los campos requeridos más los campos indicados en el parametro | http://api/recurso?fields&#x3D;campo3,campo4 | &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor       campo3: valor       campo4: valor     } &#x60;&#x60;&#x60; 
     * @param q Trae los recursos de la consulta que cumplan con la cadena de busqueda en cualquiera de los campos del recurso
     * @param filter Filtra los registros de la consulta de acuerdo a la cadena de filtrado ingresada Se presenta un ejemplo para la siguiente tabla:  |Campo1|Campo2|Campo3| |:---|:---|:---| |1|nombre1|apellido1| |2|nombre2|apellido1| |3|nombre3|apellido2| |4|nombre2|apellido2| |5|nombre5|apellido1|  |Caso|Descripcion|Ejemplo | Encoded| |:---:|:---|---|---| |**ausente** | Retorna los registros de la consulta sin aplicar filtros o aplicando los filtros por defecto del sistema| http://api/recurso |http://api/recurso |   |Campo1|Campo2|Campo3| |:---|:---|:---| |1|nombre1|apellido1| |2|nombre2|apellido1| |3|nombre3|apellido2| |4|nombre2|apellido2| |5|nombre5|apellido1|  |Caso|Descripcion|Ejemplo | Encoded| |:---:|:---|---|---| |**Filtro simple** | Retorna el numero de registros indicados en el parametro | http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2) |http://api/recurso?filter&#x3D;campo2%20%3D%20nombre2 |  |Campo1|Campo2|Campo3| |:---|:---|:---| |2|nombre2|apellido1| |4|nombre2|apellido2|  |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| |**Filtro LIKE** | Retorna el numero de registros indicados en el parametro | http://api/recurso?filter&#x3D;campo3 like%llido2 |http://api/recurso?filter&#x3D;campo3%20like%20llido2%25 |  |Campo1|Campo2|Campo3| |:---|:---|:---| |3|nombre3|apellido2| |4|nombre2|apellido2|   |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| |compuerta ** OR ** | Ejecutando 2 condiciones con la compuerta **OR** |http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2) or (campo2 like %re3)| http://api/recurso?filter&#x3D;(campo2%20%3D%20nombre2)%20or%20(campo2%20like%20%25re3) |  |Campo1|Campo2|Campo3| |:---|:---|:---| |2|nombre2|apellido1| |3|nombre3|apellido2|  |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| |compuerta ** AND** | Ejecutando 2 condiciones con la compuerta **AND** |http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2) and (campo2 like %o2)| http://api/recurso?filter&#x3D;(campo2%20%3D%20nombre2)%20and%20(campo2%20like%20%25o2) |  |Campo1|Campo2|Campo3| |:---|:---|:---| |4|nombre2|apellido2|  |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| | **MULTI** | Multiples parametros de filtro **MULTI**  unidos implicitamente por una compuerta **AND**  | http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2)&amp;filter&#x3D;(campo2 like %o2)| http://api/recurso?filter&#x3D;(campo2%20%3D%20nombre2)&amp;filter&#x3D;(campo2%20like%20%25o2) |  |Campo1|Campo2|Campo3| |:---|:---|:---| |4|nombre2|apellido2| 
     */
    public quotesGet (eid: string, uid: string, offset?: number, limit?: number, sort?: Array<string>, fields?: Array<string>, q?: string, filter?: Array<string>, extraHttpRequestParams?: any ) : Observable<models.QuotesPaginados> {
        const path = this.basePath + '/quotes';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling quotesGet.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling quotesGet.');
        }
        if (offset !== undefined) {
            queryParameters.set('offset', String(offset));
        }

        if (limit !== undefined) {
            queryParameters.set('limit', String(limit));
        }

        if (sort !== undefined) {
            queryParameters.set('sort', String(sort));
        }

        if (fields !== undefined) {
            queryParameters.set('fields', String(fields));
        }

        if (q !== undefined) {
            queryParameters.set('q', String(q));
        }

        if (filter !== undefined) {
            queryParameters.set('filter', String(filter));
        }

            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Eliminar recurso Quote
     * Esta operación solo puede ser realizada por usuarios autorizados
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param id Parametros para identificar un recurso de forma unica
     */
    public quotesIdDelete (eid: string, uid: string, id: string, extraHttpRequestParams?: any ) : Observable<models.Quote> {
        const path = this.basePath + '/quotes/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling quotesIdDelete.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling quotesIdDelete.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling quotesIdDelete.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Información de un Quote
     * 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param id Parametros para identificar un recurso de forma unica
     */
    public quotesIdGet (eid: string, uid: string, id: string, extraHttpRequestParams?: any ) : Observable<models.Quote> {
        const path = this.basePath + '/quotes/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling quotesIdGet.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling quotesIdGet.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling quotesIdGet.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Actualizar Recurso Quote
     * Esta operación solo puede ser realizada por usuarios autorizados
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param id Parametros para identificar un recurso de forma unica
     * @param body Quote 
     */
    public quotesIdPut (eid: string, uid: string, id: string, body: models.Quote, extraHttpRequestParams?: any ) : Observable<models.Quote> {
        const path = this.basePath + '/quotes/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling quotesIdPut.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling quotesIdPut.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling quotesIdPut.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling quotesIdPut.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Obtiene el conjunto de quotes en forma de lista
     * Listado de quotes 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param q Trae los recursos de la consulta que cumplan con la cadena de busqueda en cualquiera de los campos del recurso
     */
    public quotesListarGet (eid: string, uid: string, q?: string, extraHttpRequestParams?: any ) : Observable<models.Listas> {
        const path = this.basePath + '/quotes/listar';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling quotesListarGet.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling quotesListarGet.');
        }
        if (q !== undefined) {
            queryParameters.set('q', String(q));
        }

            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Crear un Quote
     * \&quot;Crear un Quote\&quot; 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param body Quote 
     */
    public quotesPost (eid: string, uid: string, body: models.Quote, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/quotes';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling quotesPost.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling quotesPost.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling quotesPost.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Obtiene el conjunto de regimenes
     * Listado de regimenes 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param offset Numero del primer registro a cargar en la pagina Se presenta un ejemplo para la siguiente tabla:  |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**ausente** | Retorna los registros desde el primer registro de la consulta| http://api/recurso |   |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**valor** | Retorna los registros desde el registro indicado en el parametro| http://api/recurso?offset&#x3D;3 |  |Campo1|Campo2| |:---|:---| |3|nombre3| |4|nombre4| |5|nombre5| 
     * @param limit Numero de elementos a retornar en la consulta. Se presenta un ejemplo para la siguiente tabla:  |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**ausente** | El numero de registros por defecto del sistema, supongamos que es 20| http://api/recurso |   |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**valor** | Retorna el numero de registros indicados en el parametro| http://api/recurso?limit&#x3D;2 |  |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| 
     * @param sort Listado de nombres de campos para ordenar los resultados , se permite un maximo de 3 criterios de ordenamiento.  Prefijo|Descripcion|Ejemplo :---:|:---|---: +| Indica que el campo se debera nombrar ascendentemente| +nombre -| Indica que el campo se debera nombrar descendentemente| -nombre *vacio* | Indica que el campo se debera nombrar por defecto, es decir, ascendentemente| nombre **multiple** | Se puede enviar con multiple campos para filtrar | +nombre&amp;#124;-apellido&amp;#124;identificador 
     * @param fields Listado de nombres decampos a retornar de la consulta, separados por comas (,). Los campos requeridos siempre deben ser retornados, los ejemplos siguen la base presentada a continuacion :  &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor       campo3: valor       campo4: valor       campo5: valor     } &#x60;&#x60;&#x60;   |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**ausente** | Retorna por defecto todos los campos del recurso solicitado| http://api/recurso | &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor       campo3: valor       campo4: valor       campo5: valor     } &#x60;&#x60;&#x60; |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**vacio** | Retorna solamente los campos requeridos| http://api/recurso?fields | &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor     } &#x60;&#x60;&#x60;  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**multiple** | Retorna los campos requeridos más los campos indicados en el parametro | http://api/recurso?fields&#x3D;campo3,campo4 | &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor       campo3: valor       campo4: valor     } &#x60;&#x60;&#x60; 
     * @param q Trae los recursos de la consulta que cumplan con la cadena de busqueda en cualquiera de los campos del recurso
     * @param filter Filtra los registros de la consulta de acuerdo a la cadena de filtrado ingresada Se presenta un ejemplo para la siguiente tabla:  |Campo1|Campo2|Campo3| |:---|:---|:---| |1|nombre1|apellido1| |2|nombre2|apellido1| |3|nombre3|apellido2| |4|nombre2|apellido2| |5|nombre5|apellido1|  |Caso|Descripcion|Ejemplo | Encoded| |:---:|:---|---|---| |**ausente** | Retorna los registros de la consulta sin aplicar filtros o aplicando los filtros por defecto del sistema| http://api/recurso |http://api/recurso |   |Campo1|Campo2|Campo3| |:---|:---|:---| |1|nombre1|apellido1| |2|nombre2|apellido1| |3|nombre3|apellido2| |4|nombre2|apellido2| |5|nombre5|apellido1|  |Caso|Descripcion|Ejemplo | Encoded| |:---:|:---|---|---| |**Filtro simple** | Retorna el numero de registros indicados en el parametro | http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2) |http://api/recurso?filter&#x3D;campo2%20%3D%20nombre2 |  |Campo1|Campo2|Campo3| |:---|:---|:---| |2|nombre2|apellido1| |4|nombre2|apellido2|  |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| |**Filtro LIKE** | Retorna el numero de registros indicados en el parametro | http://api/recurso?filter&#x3D;campo3 like%llido2 |http://api/recurso?filter&#x3D;campo3%20like%20llido2%25 |  |Campo1|Campo2|Campo3| |:---|:---|:---| |3|nombre3|apellido2| |4|nombre2|apellido2|   |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| |compuerta ** OR ** | Ejecutando 2 condiciones con la compuerta **OR** |http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2) or (campo2 like %re3)| http://api/recurso?filter&#x3D;(campo2%20%3D%20nombre2)%20or%20(campo2%20like%20%25re3) |  |Campo1|Campo2|Campo3| |:---|:---|:---| |2|nombre2|apellido1| |3|nombre3|apellido2|  |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| |compuerta ** AND** | Ejecutando 2 condiciones con la compuerta **AND** |http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2) and (campo2 like %o2)| http://api/recurso?filter&#x3D;(campo2%20%3D%20nombre2)%20and%20(campo2%20like%20%25o2) |  |Campo1|Campo2|Campo3| |:---|:---|:---| |4|nombre2|apellido2|  |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| | **MULTI** | Multiples parametros de filtro **MULTI**  unidos implicitamente por una compuerta **AND**  | http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2)&amp;filter&#x3D;(campo2 like %o2)| http://api/recurso?filter&#x3D;(campo2%20%3D%20nombre2)&amp;filter&#x3D;(campo2%20like%20%25o2) |  |Campo1|Campo2|Campo3| |:---|:---|:---| |4|nombre2|apellido2| 
     */
    public regimenesGet (eid: string, uid: string, offset?: number, limit?: number, sort?: Array<string>, fields?: Array<string>, q?: string, filter?: Array<string>, extraHttpRequestParams?: any ) : Observable<models.RegimenesPaginados> {
        const path = this.basePath + '/regimenes';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling regimenesGet.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling regimenesGet.');
        }
        if (offset !== undefined) {
            queryParameters.set('offset', String(offset));
        }

        if (limit !== undefined) {
            queryParameters.set('limit', String(limit));
        }

        if (sort !== undefined) {
            queryParameters.set('sort', String(sort));
        }

        if (fields !== undefined) {
            queryParameters.set('fields', String(fields));
        }

        if (q !== undefined) {
            queryParameters.set('q', String(q));
        }

        if (filter !== undefined) {
            queryParameters.set('filter', String(filter));
        }

            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Eliminar recurso Regimen
     * Esta operación solo puede ser realizada por usuarios autorizados
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param id Parametros para identificar un recurso de forma unica
     */
    public regimenesIdDelete (eid: string, uid: string, id: string, extraHttpRequestParams?: any ) : Observable<models.Regimen> {
        const path = this.basePath + '/regimenes/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling regimenesIdDelete.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling regimenesIdDelete.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling regimenesIdDelete.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Información de un Regimen
     * 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param id Parametros para identificar un recurso de forma unica
     */
    public regimenesIdGet (eid: string, uid: string, id: string, extraHttpRequestParams?: any ) : Observable<models.Regimen> {
        const path = this.basePath + '/regimenes/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling regimenesIdGet.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling regimenesIdGet.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling regimenesIdGet.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Actualizar Recurso Regimen
     * Esta operación solo puede ser realizada por usuarios autorizados
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param id Parametros para identificar un recurso de forma unica
     * @param body Regimen 
     */
    public regimenesIdPut (eid: string, uid: string, id: string, body: models.Regimen, extraHttpRequestParams?: any ) : Observable<models.Regimen> {
        const path = this.basePath + '/regimenes/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling regimenesIdPut.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling regimenesIdPut.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling regimenesIdPut.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling regimenesIdPut.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Obtiene el conjunto de regimenes retenidos de un regimen especificado
     * Listado de regimenes retenidos 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param id Parametros para identificar un recurso de forma unica
     */
    public regimenesIdRegimenesRetenidosGet (eid: string, uid: string, id: string, extraHttpRequestParams?: any ) : Observable<Array<models.RegimenRetenido>> {
        const path = this.basePath + '/regimenes/{id}/regimenes-retenidos'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling regimenesIdRegimenesRetenidosGet.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling regimenesIdRegimenesRetenidosGet.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling regimenesIdRegimenesRetenidosGet.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Actualizar Recurso Regimen Retenido
     * Esta operación solo puede ser realizada por usuarios autorizados
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param id Parametros para identificar un recurso de forma unica
     * @param subId Parametros para identificar un recurso  detalle de un recurso referenciado
     * @param body Regimen  Retenido 
     */
    public regimenesIdRegimenesRetenidosSubIdPut (eid: string, uid: string, id: string, subId: string, body: models.RegimenRetenido, extraHttpRequestParams?: any ) : Observable<models.RegimenRetenido> {
        const path = this.basePath + '/regimenes/{id}/regimenes-retenidos/{subId}'
            .replace('{' + 'id' + '}', String(id))
            .replace('{' + 'subId' + '}', String(subId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling regimenesIdRegimenesRetenidosSubIdPut.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling regimenesIdRegimenesRetenidosSubIdPut.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling regimenesIdRegimenesRetenidosSubIdPut.');
        }
        // verify required parameter 'subId' is not null or undefined
        if (subId === null || subId === undefined) {
            throw new Error('Required parameter subId was null or undefined when calling regimenesIdRegimenesRetenidosSubIdPut.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling regimenesIdRegimenesRetenidosSubIdPut.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Obtiene el conjunto de regimenes en forma de lista
     * Listado de regimenes 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param q Trae los recursos de la consulta que cumplan con la cadena de busqueda en cualquiera de los campos del recurso
     */
    public regimenesListarGet (eid: string, uid: string, q?: string, extraHttpRequestParams?: any ) : Observable<models.Listas> {
        const path = this.basePath + '/regimenes/listar';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling regimenesListarGet.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling regimenesListarGet.');
        }
        if (q !== undefined) {
            queryParameters.set('q', String(q));
        }

            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Crear un Regimen
     * \&quot;Crear un Regimen\&quot; 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param body Regimen 
     */
    public regimenesPost (eid: string, uid: string, body: models.Regimen, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/regimenes';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling regimenesPost.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling regimenesPost.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling regimenesPost.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Obtiene el conjunto de TiposOpcion
     * Listado de TiposOpcion 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param offset Numero del primer registro a cargar en la pagina Se presenta un ejemplo para la siguiente tabla:  |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**ausente** | Retorna los registros desde el primer registro de la consulta| http://api/recurso |   |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**valor** | Retorna los registros desde el registro indicado en el parametro| http://api/recurso?offset&#x3D;3 |  |Campo1|Campo2| |:---|:---| |3|nombre3| |4|nombre4| |5|nombre5| 
     * @param limit Numero de elementos a retornar en la consulta. Se presenta un ejemplo para la siguiente tabla:  |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**ausente** | El numero de registros por defecto del sistema, supongamos que es 20| http://api/recurso |   |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**valor** | Retorna el numero de registros indicados en el parametro| http://api/recurso?limit&#x3D;2 |  |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| 
     * @param sort Listado de nombres de campos para ordenar los resultados , se permite un maximo de 3 criterios de ordenamiento.  Prefijo|Descripcion|Ejemplo :---:|:---|---: +| Indica que el campo se debera nombrar ascendentemente| +nombre -| Indica que el campo se debera nombrar descendentemente| -nombre *vacio* | Indica que el campo se debera nombrar por defecto, es decir, ascendentemente| nombre **multiple** | Se puede enviar con multiple campos para filtrar | +nombre&amp;#124;-apellido&amp;#124;identificador 
     * @param fields Listado de nombres decampos a retornar de la consulta, separados por comas (,). Los campos requeridos siempre deben ser retornados, los ejemplos siguen la base presentada a continuacion :  &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor       campo3: valor       campo4: valor       campo5: valor     } &#x60;&#x60;&#x60;   |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**ausente** | Retorna por defecto todos los campos del recurso solicitado| http://api/recurso | &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor       campo3: valor       campo4: valor       campo5: valor     } &#x60;&#x60;&#x60; |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**vacio** | Retorna solamente los campos requeridos| http://api/recurso?fields | &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor     } &#x60;&#x60;&#x60;  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**multiple** | Retorna los campos requeridos más los campos indicados en el parametro | http://api/recurso?fields&#x3D;campo3,campo4 | &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor       campo3: valor       campo4: valor     } &#x60;&#x60;&#x60; 
     * @param q Trae los recursos de la consulta que cumplan con la cadena de busqueda en cualquiera de los campos del recurso
     * @param filter Filtra los registros de la consulta de acuerdo a la cadena de filtrado ingresada Se presenta un ejemplo para la siguiente tabla:  |Campo1|Campo2|Campo3| |:---|:---|:---| |1|nombre1|apellido1| |2|nombre2|apellido1| |3|nombre3|apellido2| |4|nombre2|apellido2| |5|nombre5|apellido1|  |Caso|Descripcion|Ejemplo | Encoded| |:---:|:---|---|---| |**ausente** | Retorna los registros de la consulta sin aplicar filtros o aplicando los filtros por defecto del sistema| http://api/recurso |http://api/recurso |   |Campo1|Campo2|Campo3| |:---|:---|:---| |1|nombre1|apellido1| |2|nombre2|apellido1| |3|nombre3|apellido2| |4|nombre2|apellido2| |5|nombre5|apellido1|  |Caso|Descripcion|Ejemplo | Encoded| |:---:|:---|---|---| |**Filtro simple** | Retorna el numero de registros indicados en el parametro | http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2) |http://api/recurso?filter&#x3D;campo2%20%3D%20nombre2 |  |Campo1|Campo2|Campo3| |:---|:---|:---| |2|nombre2|apellido1| |4|nombre2|apellido2|  |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| |**Filtro LIKE** | Retorna el numero de registros indicados en el parametro | http://api/recurso?filter&#x3D;campo3 like%llido2 |http://api/recurso?filter&#x3D;campo3%20like%20llido2%25 |  |Campo1|Campo2|Campo3| |:---|:---|:---| |3|nombre3|apellido2| |4|nombre2|apellido2|   |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| |compuerta ** OR ** | Ejecutando 2 condiciones con la compuerta **OR** |http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2) or (campo2 like %re3)| http://api/recurso?filter&#x3D;(campo2%20%3D%20nombre2)%20or%20(campo2%20like%20%25re3) |  |Campo1|Campo2|Campo3| |:---|:---|:---| |2|nombre2|apellido1| |3|nombre3|apellido2|  |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| |compuerta ** AND** | Ejecutando 2 condiciones con la compuerta **AND** |http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2) and (campo2 like %o2)| http://api/recurso?filter&#x3D;(campo2%20%3D%20nombre2)%20and%20(campo2%20like%20%25o2) |  |Campo1|Campo2|Campo3| |:---|:---|:---| |4|nombre2|apellido2|  |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| | **MULTI** | Multiples parametros de filtro **MULTI**  unidos implicitamente por una compuerta **AND**  | http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2)&amp;filter&#x3D;(campo2 like %o2)| http://api/recurso?filter&#x3D;(campo2%20%3D%20nombre2)&amp;filter&#x3D;(campo2%20like%20%25o2) |  |Campo1|Campo2|Campo3| |:---|:---|:---| |4|nombre2|apellido2| 
     */
    public tiposOpcionGet (eid: string, offset?: number, limit?: number, sort?: Array<string>, fields?: Array<string>, q?: string, filter?: Array<string>, extraHttpRequestParams?: any ) : Observable<models.TiposOpcion> {
        const path = this.basePath + '/tipos-opcion';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling tiposOpcionGet.');
        }
        if (offset !== undefined) {
            queryParameters.set('offset', String(offset));
        }

        if (limit !== undefined) {
            queryParameters.set('limit', String(limit));
        }

        if (sort !== undefined) {
            queryParameters.set('sort', String(sort));
        }

        if (fields !== undefined) {
            queryParameters.set('fields', String(fields));
        }

        if (q !== undefined) {
            queryParameters.set('q', String(q));
        }

        if (filter !== undefined) {
            queryParameters.set('filter', String(filter));
        }

            headerParams.set('eid', String(eid));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Obtiene el conjunto de TiposOpcion en forma de lista
     * Listado de TiposOpcion 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     */
    public tiposOpcionListarGet (eid: string, uid: string, extraHttpRequestParams?: any ) : Observable<models.Listas> {
        const path = this.basePath + '/tipos-opcion/listar';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling tiposOpcionListarGet.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling tiposOpcionListarGet.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Obtiene el conjunto de zonas-geograficas
     * Listado de zonas-geograficas 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param offset Numero del primer registro a cargar en la pagina Se presenta un ejemplo para la siguiente tabla:  |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**ausente** | Retorna los registros desde el primer registro de la consulta| http://api/recurso |   |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**valor** | Retorna los registros desde el registro indicado en el parametro| http://api/recurso?offset&#x3D;3 |  |Campo1|Campo2| |:---|:---| |3|nombre3| |4|nombre4| |5|nombre5| 
     * @param limit Numero de elementos a retornar en la consulta. Se presenta un ejemplo para la siguiente tabla:  |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**ausente** | El numero de registros por defecto del sistema, supongamos que es 20| http://api/recurso |   |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| |3|nombre3| |4|nombre4| |5|nombre5|  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**valor** | Retorna el numero de registros indicados en el parametro| http://api/recurso?limit&#x3D;2 |  |Campo1|Campo2| |:---|:---| |1|nombre1| |2|nombre2| 
     * @param sort Listado de nombres de campos para ordenar los resultados , se permite un maximo de 3 criterios de ordenamiento.  Prefijo|Descripcion|Ejemplo :---:|:---|---: +| Indica que el campo se debera nombrar ascendentemente| +nombre -| Indica que el campo se debera nombrar descendentemente| -nombre *vacio* | Indica que el campo se debera nombrar por defecto, es decir, ascendentemente| nombre **multiple** | Se puede enviar con multiple campos para filtrar | +nombre&amp;#124;-apellido&amp;#124;identificador 
     * @param fields Listado de nombres decampos a retornar de la consulta, separados por comas (,). Los campos requeridos siempre deben ser retornados, los ejemplos siguen la base presentada a continuacion :  &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor       campo3: valor       campo4: valor       campo5: valor     } &#x60;&#x60;&#x60;   |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**ausente** | Retorna por defecto todos los campos del recurso solicitado| http://api/recurso | &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor       campo3: valor       campo4: valor       campo5: valor     } &#x60;&#x60;&#x60; |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**vacio** | Retorna solamente los campos requeridos| http://api/recurso?fields | &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor     } &#x60;&#x60;&#x60;  |Caso|Descripcion|Ejemplo | |:---:|:---|---:| |**multiple** | Retorna los campos requeridos más los campos indicados en el parametro | http://api/recurso?fields&#x3D;campo3,campo4 | &#x60;&#x60;&#x60;JSON     {       campo_requerido_1: valor       campo_requerido_2: valor       campo3: valor       campo4: valor     } &#x60;&#x60;&#x60; 
     * @param q Trae los recursos de la consulta que cumplan con la cadena de busqueda en cualquiera de los campos del recurso
     * @param filter Filtra los registros de la consulta de acuerdo a la cadena de filtrado ingresada Se presenta un ejemplo para la siguiente tabla:  |Campo1|Campo2|Campo3| |:---|:---|:---| |1|nombre1|apellido1| |2|nombre2|apellido1| |3|nombre3|apellido2| |4|nombre2|apellido2| |5|nombre5|apellido1|  |Caso|Descripcion|Ejemplo | Encoded| |:---:|:---|---|---| |**ausente** | Retorna los registros de la consulta sin aplicar filtros o aplicando los filtros por defecto del sistema| http://api/recurso |http://api/recurso |   |Campo1|Campo2|Campo3| |:---|:---|:---| |1|nombre1|apellido1| |2|nombre2|apellido1| |3|nombre3|apellido2| |4|nombre2|apellido2| |5|nombre5|apellido1|  |Caso|Descripcion|Ejemplo | Encoded| |:---:|:---|---|---| |**Filtro simple** | Retorna el numero de registros indicados en el parametro | http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2) |http://api/recurso?filter&#x3D;campo2%20%3D%20nombre2 |  |Campo1|Campo2|Campo3| |:---|:---|:---| |2|nombre2|apellido1| |4|nombre2|apellido2|  |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| |**Filtro LIKE** | Retorna el numero de registros indicados en el parametro | http://api/recurso?filter&#x3D;campo3 like%llido2 |http://api/recurso?filter&#x3D;campo3%20like%20llido2%25 |  |Campo1|Campo2|Campo3| |:---|:---|:---| |3|nombre3|apellido2| |4|nombre2|apellido2|   |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| |compuerta ** OR ** | Ejecutando 2 condiciones con la compuerta **OR** |http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2) or (campo2 like %re3)| http://api/recurso?filter&#x3D;(campo2%20%3D%20nombre2)%20or%20(campo2%20like%20%25re3) |  |Campo1|Campo2|Campo3| |:---|:---|:---| |2|nombre2|apellido1| |3|nombre3|apellido2|  |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| |compuerta ** AND** | Ejecutando 2 condiciones con la compuerta **AND** |http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2) and (campo2 like %o2)| http://api/recurso?filter&#x3D;(campo2%20%3D%20nombre2)%20and%20(campo2%20like%20%25o2) |  |Campo1|Campo2|Campo3| |:---|:---|:---| |4|nombre2|apellido2|  |Caso|Descripcion|Ejemplo | Encoded|  |:---:|:---|---|---| | **MULTI** | Multiples parametros de filtro **MULTI**  unidos implicitamente por una compuerta **AND**  | http://api/recurso?filter&#x3D;(campo2&#x3D;nombre2)&amp;filter&#x3D;(campo2 like %o2)| http://api/recurso?filter&#x3D;(campo2%20%3D%20nombre2)&amp;filter&#x3D;(campo2%20like%20%25o2) |  |Campo1|Campo2|Campo3| |:---|:---|:---| |4|nombre2|apellido2| 
     */
    public zonasGeograficasGet (eid: string, uid: string, offset?: number, limit?: number, sort?: Array<string>, fields?: Array<string>, q?: string, filter?: Array<string>, extraHttpRequestParams?: any ) : Observable<models.ZonasGeograficasPaginados> {
        const path = this.basePath + '/zonas-geograficas';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling zonasGeograficasGet.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling zonasGeograficasGet.');
        }
        if (offset !== undefined) {
            queryParameters.set('offset', String(offset));
        }

        if (limit !== undefined) {
            queryParameters.set('limit', String(limit));
        }

        if (sort !== undefined) {
            queryParameters.set('sort', String(sort));
        }

        if (fields !== undefined) {
            queryParameters.set('fields', String(fields));
        }

        if (q !== undefined) {
            queryParameters.set('q', String(q));
        }

        if (filter !== undefined) {
            queryParameters.set('filter', String(filter));
        }

            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Eliminar recurso ZonaGeografica
     * Esta operación solo puede ser realizada por usuarios autorizados
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param id Parametros para identificar un recurso de forma unica
     */
    public zonasGeograficasIdDelete (eid: string, uid: string, id: string, extraHttpRequestParams?: any ) : Observable<models.ZonaGeografica> {
        const path = this.basePath + '/zonas-geograficas/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling zonasGeograficasIdDelete.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling zonasGeograficasIdDelete.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling zonasGeograficasIdDelete.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Información de un ZonaGeografica
     * 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param id Parametros para identificar un recurso de forma unica
     */
    public zonasGeograficasIdGet (eid: string, uid: string, id: string, extraHttpRequestParams?: any ) : Observable<models.ZonaGeografica> {
        const path = this.basePath + '/zonas-geograficas/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling zonasGeograficasIdGet.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling zonasGeograficasIdGet.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling zonasGeograficasIdGet.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Actualizar Recurso ZonaGeografica
     * Esta operación solo puede ser realizada por usuarios autorizados
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param id Parametros para identificar un recurso de forma unica
     * @param body Zonas Geograficas
     */
    public zonasGeograficasIdPut (eid: string, uid: string, id: string, body: models.ZonaGeografica, extraHttpRequestParams?: any ) : Observable<models.ZonaGeografica> {
        const path = this.basePath + '/zonas-geograficas/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling zonasGeograficasIdPut.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling zonasGeograficasIdPut.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling zonasGeograficasIdPut.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling zonasGeograficasIdPut.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Obtiene el conjunto de zonas-geograficas en forma de lista
     * Listado de zonas-geograficas 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param q Trae los recursos de la consulta que cumplan con la cadena de busqueda en cualquiera de los campos del recurso
     */
    public zonasGeograficasListarGet (eid: string, uid: string, q?: string, extraHttpRequestParams?: any ) : Observable<models.Listas> {
        const path = this.basePath + '/zonas-geograficas/listar';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling zonasGeograficasListarGet.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling zonasGeograficasListarGet.');
        }
        if (q !== undefined) {
            queryParameters.set('q', String(q));
        }

            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Crear una ZonaGeografica
     * \&quot;Crear una ZonaGeografica\&quot; 
     * @param eid Parametro base para identificar a una Empresa cliente
     * @param uid Parametro base para identificar a un usuario
     * @param body Zonas Geograficas
     */
    public zonasGeograficasPost (eid: string, uid: string, body: models.ZonaGeografica, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/zonas-geograficas';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling zonasGeograficasPost.');
        }
        // verify required parameter 'uid' is not null or undefined
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling zonasGeograficasPost.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling zonasGeograficasPost.');
        }
            headerParams.set('eid', String(eid));

            headerParams.set('uid', String(uid));

        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

}
